{
  "language": "Solidity",
  "sources": {
    ".coverage_contracts/Api3Voting.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    GPL-3.0-or-later\n */\n\npragma solidity 0.4.24;\n\nimport \"@aragon/os/contracts/apps/AragonApp.sol\";\nimport \"@aragon/os/contracts/common/IForwarder.sol\";\n\nimport \"@aragon/os/contracts/lib/math/SafeMath.sol\";\nimport \"@aragon/os/contracts/lib/math/SafeMath64.sol\";\n\nimport \"./interfaces/IApi3Pool.sol\";\n\n\ncontract Api3Voting is IForwarder, AragonApp {\nfunction c_0xa126c9f9(bytes32 c__0xa126c9f9) public pure {}\n\n    using SafeMath for uint256;\n    using SafeMath64 for uint64;\n\n    bytes32 public constant CREATE_VOTES_ROLE = keccak256(\"CREATE_VOTES_ROLE\");\n    bytes32 public constant MODIFY_SUPPORT_ROLE = keccak256(\"MODIFY_SUPPORT_ROLE\");\n    bytes32 public constant MODIFY_QUORUM_ROLE = keccak256(\"MODIFY_QUORUM_ROLE\");\n\n    uint64 public constant PCT_BASE = 10 ** 18; // 0% = 0; 1% = 10^16; 100% = 10^18\n\n    string private constant ERROR_NO_VOTE = \"VOTING_NO_VOTE\";\n    string private constant ERROR_INIT_PCTS = \"VOTING_INIT_PCTS\";\n    string private constant ERROR_CHANGE_SUPPORT_PCTS = \"VOTING_CHANGE_SUPPORT_PCTS\";\n    string private constant ERROR_CHANGE_QUORUM_PCTS = \"VOTING_CHANGE_QUORUM_PCTS\";\n    string private constant ERROR_INIT_SUPPORT_TOO_BIG = \"VOTING_INIT_SUPPORT_TOO_BIG\";\n    string private constant ERROR_CHANGE_SUPPORT_TOO_BIG = \"VOTING_CHANGE_SUPP_TOO_BIG\";\n    string private constant ERROR_CAN_NOT_VOTE = \"VOTING_CAN_NOT_VOTE\";\n    string private constant ERROR_CAN_NOT_EXECUTE = \"VOTING_CAN_NOT_EXECUTE\";\n    string private constant ERROR_CAN_NOT_FORWARD = \"VOTING_CAN_NOT_FORWARD\";\n    string private constant ERROR_NO_VOTING_POWER = \"VOTING_NO_VOTING_POWER\";\n\n    enum VoterState { Absent, Yea, Nay }\n\n    struct Vote {\n        bool executed;\n        uint64 startDate;\n        uint64 snapshotBlock;\n        uint64 supportRequiredPct;\n        uint64 minAcceptQuorumPct;\n        uint256 yea;\n        uint256 nay;\n        uint256 votingPower;\n        bytes executionScript;\n        mapping (address => VoterState) voters;\n    }\n\n    uint64 public supportRequiredPct;\n    uint64 public minAcceptQuorumPct;\n    uint64 public voteTime;\n\n    IApi3Pool public api3Pool;\n    mapping (address => uint256) private userAddressToLastNewProposalTimestamp;\n\n    // We are mimicing an array, we use a mapping instead to make app upgrade more graceful\n    mapping (uint256 => Vote) internal votes;\n    uint256 public votesLength;\n\n    event StartVote(uint256 indexed voteId, address indexed creator, string metadata);\n    event CastVote(uint256 indexed voteId, address indexed voter, bool supports, uint256 stake);\n    event ExecuteVote(uint256 indexed voteId);\n    event ChangeSupportRequired(uint64 supportRequiredPct);\n    event ChangeMinQuorum(uint64 minAcceptQuorumPct);\n\n    modifier voteExists(uint256 _voteId) {c_0xa126c9f9(0x622436fcd056d802f054e25bdcf1d74c774b9f5a3ed2f6b068651e2f383f5311); /* function */ \n\nc_0xa126c9f9(0x8340ab3cc083678eb50aefbf17fd4a547c8bd6397a989f6575cf20037f0fc204); /* line */ \n        c_0xa126c9f9(0x5f6537610f3c7b2be55e18678a1bc7b6f3fc005c3c9efdd5423d05557ec10408); /* requirePre */ \nc_0xa126c9f9(0xf073d787d04ebe27ec6361e900e3cf6d43296065ab46ec89cfe6bf809c63613d); /* statement */ \nrequire(_voteId < votesLength, ERROR_NO_VOTE);c_0xa126c9f9(0xb5f6d8068096736818429c1307b483d281f6c7faa85c32c1bf425bd75daebb61); /* requirePost */ \n\nc_0xa126c9f9(0x7de3f1fa16a12cd972b4978da20bd9e34b2f0f2ca4698bfbc5060e43e4be0cdc); /* line */ \n        _;\n    }\n\n    /**\n    * @notice Initialize Voting app with `_token.symbol(): string` for governance, minimum support of `@formatPct(_supportRequiredPct)`%, minimum acceptance quorum of `@formatPct(_minAcceptQuorumPct)`%, and a voting duration of `@transformTime(_voteTime)`\n    * @param _token MiniMeToken Address that will be used as governance token\n    * @param _supportRequiredPct Percentage of yeas in casted votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\n    * @param _minAcceptQuorumPct Percentage of yeas in total possible votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\n    * @param _voteTime Seconds that a vote will be open for token holders to vote (unless enough yeas or nays have been cast to make an early decision)\n    */\n    function initialize(\n        address _token,\n        uint64 _supportRequiredPct,\n        uint64 _minAcceptQuorumPct,\n        uint64 _voteTime\n    )\n        external\n        onlyInit\n    {c_0xa126c9f9(0xf874e50bfae3d0030ecb9e76311f52805323537e1ba7365cad4d3d22c66b532e); /* function */ \n\nc_0xa126c9f9(0xda873b250f005002d4537f11136f12efdb77e5f1da444fe67899a5999f1be19f); /* line */ \n        c_0xa126c9f9(0x70076db21375e3a83b6c4754a4938b44189cb7a37c9465e981eb9188fffd8ff1); /* statement */ \ninitialized();\n\nc_0xa126c9f9(0xd9292caed2285cb2e580f44834f066d7ac1455094c34841163ede2d45d362d8a); /* line */ \n        c_0xa126c9f9(0x2c0449e786c108980630c2b63c4e35cbc6331b7c9578b5ee2e9fa08730d03f3a); /* requirePre */ \nc_0xa126c9f9(0x82fe3302bb5dc1c8a0078ee340aff80594fddcc088d40bfbf18a874c79c8f328); /* statement */ \nrequire(_minAcceptQuorumPct <= _supportRequiredPct, ERROR_INIT_PCTS);c_0xa126c9f9(0x47176a533710dc67a17fe3f80e570b68a70fde2b9526ad877e0177e9f5ea3eac); /* requirePost */ \n\nc_0xa126c9f9(0x9314641d9cfc57171bb668316713cfffcf59ed58ea04a76983cafa5a7f4a0741); /* line */ \n        c_0xa126c9f9(0x3a67e9b203cf008da75fed2f1a7ac40b49cbb6070b551bf421f7df776589d46f); /* requirePre */ \nc_0xa126c9f9(0x714a3009c21a06742cc5d8550e95ba939224ae5e2998111e406f3f2e91b41bf8); /* statement */ \nrequire(_supportRequiredPct < PCT_BASE, ERROR_INIT_SUPPORT_TOO_BIG);c_0xa126c9f9(0x3fee1ae90daf2f2d35097729f55bf6f13e401f7da77a1b969837fae336073e6c); /* requirePost */ \n\n\nc_0xa126c9f9(0xa59361244b302683ff4a178b637671aa0e88cc4ba21ef6c2f486faee630cf100); /* line */ \n        c_0xa126c9f9(0x4c663fb475022c2cf30e848129b9e1074c1f7523b1376d1e0012aa6d27d2a37c); /* statement */ \nsupportRequiredPct = _supportRequiredPct;\nc_0xa126c9f9(0xa4791afd8257b4199f910485f0e5eb4d489c8cb648a5dfa358eeb1a226e20f43); /* line */ \n        c_0xa126c9f9(0x6f8ab9aadc0864182168edd30a40501afc215da3d02fc62dc41312c584222c77); /* statement */ \nminAcceptQuorumPct = _minAcceptQuorumPct;\nc_0xa126c9f9(0xb351848734795e05f16c5fed002f42f2767b15a255a51204c0c7274138ae92c1); /* line */ \n        c_0xa126c9f9(0x259335e5108b277fda090b7d8e9ebc41d8ff98038442ecf108891ece902795e4); /* statement */ \nvoteTime = _voteTime;\n        // The pool acts as the MiniMe token\nc_0xa126c9f9(0x758e4bce53e3a7410da51508dd3b27572a90c7b2958a80bb10a860992ef0b346); /* line */ \n        c_0xa126c9f9(0x1d3187f027d1260537f1274f31c5af04b083c795ac6c05496f710757f372752f); /* statement */ \napi3Pool = IApi3Pool(_token);\n    }\n\n    /**\n    * @notice Change required support to `@formatPct(_supportRequiredPct)`%\n    * @param _supportRequiredPct New required support\n    */\n    function changeSupportRequiredPct(uint64 _supportRequiredPct)\n        external\n        authP(MODIFY_SUPPORT_ROLE, arr(uint256(_supportRequiredPct), uint256(supportRequiredPct)))\n    {c_0xa126c9f9(0x1cce5f35f364ed3af83cc712d2f14555d48964584f2ff66c04b642a9eb8b5bc0); /* function */ \n\nc_0xa126c9f9(0x8bf74dfcaf198eb0b9563e60f0ea1d469f9a1b7031b19d2bf94931c24232b974); /* line */ \n        c_0xa126c9f9(0xb18b91e38e51ccd1c9d6d132a60ef678c2c62c21161f04d6aaac9a705a8b0ce6); /* requirePre */ \nc_0xa126c9f9(0x1d9645b8fbaac7505ce7ac4f9cd3a13f44f1a6bae3116ab46d96d1570bcb7734); /* statement */ \nrequire(minAcceptQuorumPct <= _supportRequiredPct, ERROR_CHANGE_SUPPORT_PCTS);c_0xa126c9f9(0x4ddafdb090a6ad7c5c316146ffa937198ea7b0742c1a493ed30df2c7aab07f5d); /* requirePost */ \n\nc_0xa126c9f9(0xe862aa87b8441888ab4bb6f8a162863daa1593b3bcdc38019e2d0478c4ec9c59); /* line */ \n        c_0xa126c9f9(0x90a4489a68a96edf450e5c7029b3b0911ef05cce4bc2a6f45b6fb3fb83933487); /* requirePre */ \nc_0xa126c9f9(0xb0df34d6b1510d29e6a27a6647c005b944958bbf2ab4266b7152b11b4497cecd); /* statement */ \nrequire(_supportRequiredPct < PCT_BASE, ERROR_CHANGE_SUPPORT_TOO_BIG);c_0xa126c9f9(0xaf1bf8477c658d6080d9ab489345d8315d2cbc0cdf3b74b4f9847b872aa81fb1); /* requirePost */ \n\nc_0xa126c9f9(0x25ffecc24ad804bfb3d12565c9ab8db68cb2b4c07736b59e2e9fcb415c2d8e47); /* line */ \n        c_0xa126c9f9(0x8dbf3b0a03a6159a33367c69cd22d519b1b1200c99aece634aa84b17424c8d99); /* statement */ \nsupportRequiredPct = _supportRequiredPct;\n\nc_0xa126c9f9(0x0837ae363f649260571cba01e015faed1654db365730601604a1dbba3afeeec3); /* line */ \n        c_0xa126c9f9(0x4b0b763dcb5926a1d0378ba14f14b63d38abb7a04b6c1d2d934f77acf536fcd7); /* statement */ \nemit ChangeSupportRequired(_supportRequiredPct);\n    }\n\n    /**\n    * @notice Change minimum acceptance quorum to `@formatPct(_minAcceptQuorumPct)`%\n    * @param _minAcceptQuorumPct New acceptance quorum\n    */\n    function changeMinAcceptQuorumPct(uint64 _minAcceptQuorumPct)\n        external\n        authP(MODIFY_QUORUM_ROLE, arr(uint256(_minAcceptQuorumPct), uint256(minAcceptQuorumPct)))\n    {c_0xa126c9f9(0x4eb7f0b68d5efa1c6ee63eda183bb1877e258f35ca198a4a345c24be63e2db9a); /* function */ \n\nc_0xa126c9f9(0x3aa39ab11013af01a09d686252bfefd0197ca47ce552c6e655268f3458b11d50); /* line */ \n        c_0xa126c9f9(0xcefd95c31921ffed6af1122982e75dd62e8655478ac56aed55b5ea34113ab788); /* requirePre */ \nc_0xa126c9f9(0xd8e59aaa7c9a6db8bf5b146ca02b0d3137036d32e64bce1e00c8d29c18fba921); /* statement */ \nrequire(_minAcceptQuorumPct <= supportRequiredPct, ERROR_CHANGE_QUORUM_PCTS);c_0xa126c9f9(0xe9afa08e59c7b917240ee0d98d17b11adebb30e910ea3aab133402c401450a74); /* requirePost */ \n\nc_0xa126c9f9(0x33cf7288d914ea096ba6359054b7a0683d25051cb619c5c4f6fa8f2e82e03450); /* line */ \n        c_0xa126c9f9(0xcb1afad4ee9531d82700a86f147367f7e2ea147d71a08d00e4c14217bf4ce401); /* statement */ \nminAcceptQuorumPct = _minAcceptQuorumPct;\n\nc_0xa126c9f9(0x0e4dee7128d5829e9f207bb3c1fd5e63bfac97bbdc2ebfb180a4f6594cf2225e); /* line */ \n        c_0xa126c9f9(0xffba97bca3000df56ded0371bad363b823d5a43d4f301c32bdc61cb235f0cf94); /* statement */ \nemit ChangeMinQuorum(_minAcceptQuorumPct);\n    }\n\n    /**\n    * @notice Create a new vote about \"`_metadata`\"\n    * @param _executionScript EVM script to be executed on approval\n    * @param _metadata Vote metadata\n    * @return voteId Id for newly created vote\n    */\n    function newVote(bytes _executionScript, string _metadata) external auth(CREATE_VOTES_ROLE) returns (uint256 voteId) {c_0xa126c9f9(0x2cbe9917be381e0b865256cc8add5faf5189c99ac1bbfb5125382e795bdbd343); /* function */ \n\nc_0xa126c9f9(0xbbd5c7da77c13dfa8b069d3748d6061985763386aa75b02607e33fb54265f730); /* line */ \n        c_0xa126c9f9(0xcdc9c094691ef32fb3a34f47dcc0e1ed5d306c637318a28ba931c830aa9b8934); /* statement */ \nreturn _newVote(_executionScript, _metadata, true, true);\n    }\n\n    /**\n    * @notice Create a new vote about \"`_metadata`\"\n    * @param _executionScript EVM script to be executed on approval\n    * @param _metadata Vote metadata\n    * @param _castVote Whether to also cast newly created vote\n    * @param _executesIfDecided Whether to also immediately execute newly created vote if decided\n    * @return voteId id for newly created vote\n    */\n    function newVote(bytes _executionScript, string _metadata, bool _castVote, bool _executesIfDecided)\n        external\n        auth(CREATE_VOTES_ROLE)\n        returns (uint256 voteId)\n    {c_0xa126c9f9(0x6131f17f78039031b7942cd3bba0ddc32d8b9a8a3db563dc54b3a6d4eb492312); /* function */ \n\nc_0xa126c9f9(0x3459f5842230157bf2f0347a921e67d8c6099c0b1d3acb623f4f9810a4204b6c); /* line */ \n        c_0xa126c9f9(0x2085200ad2129e13de5a632751616040bd553e8f256e0353ca630ce30b4df701); /* statement */ \nreturn _newVote(_executionScript, _metadata, _castVote, _executesIfDecided);\n    }\n\n    /**\n    * @notice Vote `_supports ? 'yes' : 'no'` in vote #`_voteId`\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\n    *      created via `newVote(),` which requires initialization\n    * @param _voteId Id for vote\n    * @param _supports Whether voter supports the vote\n    * @param _executesIfDecided Whether the vote should execute its action if it becomes decided\n    */\n    function vote(uint256 _voteId, bool _supports, bool _executesIfDecided) external voteExists(_voteId) {c_0xa126c9f9(0x169f769b4394ca7cda3dafcab94e183b0a936f7c273ee76aaee1c3cd2d71f597); /* function */ \n\nc_0xa126c9f9(0x26419acba92208f2c59f1bd06ffeb469c0b746e1c066ed5ad2846d6285bed292); /* line */ \n        c_0xa126c9f9(0x1fafd9e3f2fe0ba3ac3d269cd7f8f53ca3bd341c100cc209de918df396323b63); /* requirePre */ \nc_0xa126c9f9(0x2ea2cfc5cfe36a593145e7fa50f7fd5c089366eca7dc4c6962a794cd6ae0c936); /* statement */ \nrequire(_canVote(_voteId, msg.sender), ERROR_CAN_NOT_VOTE);c_0xa126c9f9(0x3cd627229f4661cd34437e947cbda928c0b8275756bcf876a11f73f66e140932); /* requirePost */ \n\nc_0xa126c9f9(0x6541b65d36fbf017604b3fd39ce7aab4f3c8020d08b6b4b98271a3ede25377af); /* line */ \n        c_0xa126c9f9(0x514a8381b5f9e4dc7a530951371241c7f62be76908ecb23cc16196b0adbdc477); /* statement */ \n_vote(_voteId, _supports, msg.sender, _executesIfDecided);\n    }\n\n    /**\n    * @notice Execute vote #`_voteId`\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\n    *      created via `newVote(),` which requires initialization\n    * @param _voteId Id for vote\n    */\n    function executeVote(uint256 _voteId) external voteExists(_voteId) {c_0xa126c9f9(0x1cf9d035364c84ecc5e6ffbf6dfe4c27cd5549b9af1a4b3458c2a1dafe2a1b29); /* function */ \n\nc_0xa126c9f9(0x006b6b849f6f26c46b71d658c0d79e31ec1f0d8a08c044d319bc494deb717834); /* line */ \n        c_0xa126c9f9(0xe824a921fbf72f16a1f6ac37cb361108cdf916f9ee58390849ca4b1c6934fe20); /* statement */ \n_executeVote(_voteId);\n    }\n\n    // Forwarding fns\n\n    function isForwarder() external pure returns (bool) {c_0xa126c9f9(0x1616faededc5cb85cb6519271f5e21e506eced90b70c8e7e98720d561f6d05eb); /* function */ \n\nc_0xa126c9f9(0xf05a2f356a216003f5c3ddf2684ed1f302b3c6670734574282756802323dc197); /* line */ \n        c_0xa126c9f9(0x169131f74adfafb6c49ddc07b3a688dabf5c78205d17fb2c50ee008ceb7b91a4); /* statement */ \nreturn true;\n    }\n\n    /**\n    * @notice Creates a vote to execute the desired action, and casts a support vote if possible\n    * @dev IForwarder interface conformance\n    * @param _evmScript Start vote with script\n    */\n    function forward(bytes _evmScript) public {c_0xa126c9f9(0x5353f016cb60180ff821dbca0753877e08affa36c9fab2ca96e508440850c707); /* function */ \n\nc_0xa126c9f9(0x340f708816441d8250e0eeda1f11b1e7bed78c19654dc7a4121c1fef95d57dbb); /* line */ \n        c_0xa126c9f9(0x7d1f2d8b2385bd03eb0e3296248d415fca4cc5d05f1e127e260caae61fc24197); /* requirePre */ \nc_0xa126c9f9(0x0c66a70913a3d8829bf97cccd60ebdc77bd34a92b8a7df3d9281486899d444a4); /* statement */ \nrequire(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);c_0xa126c9f9(0x21d2108eed4164296b3710a1e20f192e0e1e188f2c50c17662d256060b8cccbb); /* requirePost */ \n\nc_0xa126c9f9(0xa73231f847a0921e8e24a707aebac0298ac83aa163e7cafb5e69021b12fe2d3b); /* line */ \n        c_0xa126c9f9(0xf420a5d1fa0a7d439039a7cce4cfc9e0cd113d9eb572f39152794989265fa492); /* statement */ \n_newVote(_evmScript, \"\", true, true);\n    }\n\n    function canForward(address _sender, bytes) public view returns (bool) {c_0xa126c9f9(0xf977e45e7165fd14980513b273534b18fa4569487f9716a453222843190d3f3f); /* function */ \n\n        // Note that `canPerform()` implicitly does an initialization check itself\nc_0xa126c9f9(0x1b5ebbc3376ffd25690f8b87666dfdfb0248b8b1653c34a16da1f9ebebc20fa4); /* line */ \n        c_0xa126c9f9(0xf5960bc383480fce20613d7ba8aa9acd1ad510990580b3876d2da3ccb9b19bea); /* statement */ \nreturn canPerform(_sender, CREATE_VOTES_ROLE, arr());\n    }\n\n    // Getter fns\n\n    /**\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\n    *      created via `newVote(),` which requires initialization\n    */\n    function canExecute(uint256 _voteId) public view voteExists(_voteId) returns (bool) {c_0xa126c9f9(0x5eae59eafe475af33e8e715c154f2e9b59322c2ec63500a7a6611135c3c649b0); /* function */ \n\nc_0xa126c9f9(0x1c43644462f201be590135580593ecaac62ac774b343e341464c0024e78bd928); /* line */ \n        c_0xa126c9f9(0x379ee183b1da366347fbae283f87054bbc947f4c126aef7e8e692ab14b561ac3); /* statement */ \nreturn _canExecute(_voteId);\n    }\n\n    /**\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\n    *      created via `newVote(),` which requires initialization\n    */\n    function canVote(uint256 _voteId, address _voter) public view voteExists(_voteId) returns (bool) {c_0xa126c9f9(0x5cc3db031ede6fc897a43e37009e20fc3103d87359b2ff28edb02474355411ea); /* function */ \n\nc_0xa126c9f9(0x9ffc6bdfc8b647b024f2b5617768a4424ef2a2fda3c603626982ccf26674fd80); /* line */ \n        c_0xa126c9f9(0x4b50d22de3cbcdcc743b96b18c2d16010829e3745377cd2b13177e4e0ee368a6); /* statement */ \nreturn _canVote(_voteId, _voter);\n    }\n\n    function getVote(uint256 _voteId)\n        public\n        view\n        voteExists(_voteId)\n        returns (\n            bool open,\n            bool executed,\n            uint64 startDate,\n            uint64 snapshotBlock,\n            uint64 supportRequired,\n            uint64 minAcceptQuorum,\n            uint256 yea,\n            uint256 nay,\n            uint256 votingPower,\n            bytes script\n        )\n    {c_0xa126c9f9(0x46ca8df77b52733a955f654f7d4e0000183beb835c280767641d2ca3d71f7b7c); /* function */ \n\nc_0xa126c9f9(0x4b1c2006423b5a9a4d68b85baeded8afce300148f032bcb7dd4915628e0c33f2); /* line */ \n        c_0xa126c9f9(0xb71fa9fa96de5322f6fc703139b81868f5f09f6dabbb447acf7af97f6e402cce); /* statement */ \nVote storage vote_ = votes[_voteId];\n\nc_0xa126c9f9(0xb825dc8939f2821977f1dd482ade7c23a0f84a3e396cc5d1a70f1ba0f9a4f2dc); /* line */ \n        c_0xa126c9f9(0x45345795c965d9fd7a776c12932974f03526b5bd35c59ad92bda20de217872c8); /* statement */ \nopen = _isVoteOpen(vote_);\nc_0xa126c9f9(0x77d39fb45fad0b7c9d8552b7829e6d7f7ddb0a5681f5a10fcd10e322e4b92982); /* line */ \n        c_0xa126c9f9(0x4983abc4ec73c7c6e0612f708bd6f0fe2cb622c5006d809b40a637ae5ecd0bb3); /* statement */ \nexecuted = vote_.executed;\nc_0xa126c9f9(0xc4b41f53c61c811695bd48f18fe23fe17dcdedc390b9f0c2ebb47a2599914ea3); /* line */ \n        c_0xa126c9f9(0x3b60c77d619f12b54c85e0ebd75dec5dff7f25829c2faa510bf45d0a97840452); /* statement */ \nstartDate = vote_.startDate;\nc_0xa126c9f9(0x8fb73cf368e7eb1be98cd1a1c77fd83e55f958e85b46d40ebf8c98bad907f375); /* line */ \n        c_0xa126c9f9(0x866eaa1e8d8ca097a7155ed3c26c1c32a51eeaca7f173a74a817bad7e0c9bf1a); /* statement */ \nsnapshotBlock = vote_.snapshotBlock;\nc_0xa126c9f9(0x48695e4db0686a1de794fbe67162f0e6e9d66040c64c23edc68219b1bcc22b2a); /* line */ \n        c_0xa126c9f9(0x23cea624553b4df6372ec649141e111b17d394b2325feb4a76273e733da661a1); /* statement */ \nsupportRequired = vote_.supportRequiredPct;\nc_0xa126c9f9(0x6efb6219251358b7bffc6eca95781032f7936f1f30b8427a47d9bf97479d959b); /* line */ \n        c_0xa126c9f9(0x3ee3589e2edee62a0b11179340f220908bbf7ce201ffeaa400f7ae0133bcc416); /* statement */ \nminAcceptQuorum = vote_.minAcceptQuorumPct;\nc_0xa126c9f9(0x8caf0d5cf2a897b0910111522f16d47b9fd097fe532d53520671d6646becc905); /* line */ \n        c_0xa126c9f9(0x0491758efc17d963f4f55c5edba391e3356ef3a0a8778f4b33b863d7337c3ece); /* statement */ \nyea = vote_.yea;\nc_0xa126c9f9(0x7b6fae1866e9ed1570d63bf5078a3c3ec0bcfbff885da961441b1492ce5a2158); /* line */ \n        c_0xa126c9f9(0x11d255ba46582668c5706c541b89bfa2b3ea2f0fda31abd0890bd620f5286f90); /* statement */ \nnay = vote_.nay;\nc_0xa126c9f9(0x8e2c80e97093d7521049837ac457ebed499b64905a0a27da1aa8eba68e196938); /* line */ \n        c_0xa126c9f9(0xe56aac5d9293ab3e1ba0c9d22569439ffa57878fb661f7f5515a4a2e7e9172f0); /* statement */ \nvotingPower = vote_.votingPower;\nc_0xa126c9f9(0x635ca9b66b311cabe4c8e5b2cefaf283479c5d44322386cd2a8108154273ec31); /* line */ \n        c_0xa126c9f9(0xaf730bc7d490dabeab73ec2f8b93f1e13070cb8018a59d31dd43564df10323c2); /* statement */ \nscript = vote_.executionScript;\n    }\n\n    function getVoterState(uint256 _voteId, address _voter) public view voteExists(_voteId) returns (VoterState) {c_0xa126c9f9(0xf7e4f1a85dbbed3bc590d77cd10eb7ee5090a6e473ca44dff5a9bfd47addb3b6); /* function */ \n\nc_0xa126c9f9(0xb0876c79782df7159a00889a7d07ce7bb5f01258351e32401b1a4460e506f4c4); /* line */ \n        c_0xa126c9f9(0x9063ab27e5034f627a602c7212c0c2aeeda5585bb26b14b975364ca99a180f79); /* statement */ \nreturn votes[_voteId].voters[_voter];\n    }\n\n    // Internal fns\n\n    function _newVote(bytes _executionScript, string _metadata, bool _castVote, bool _executesIfDecided)\n        internal\n        returns (uint256 voteId)\n    {c_0xa126c9f9(0x02904a9b54a33bbd612cc5d216da09258bed4b1ff894aa867bd25c2c77168c7a); /* function */ \n\nc_0xa126c9f9(0x31abd1eab16554006b8279f3f265b492622a8a1d608c471cf7b6486a704f6f49); /* line */ \n        c_0xa126c9f9(0xd4171a4abf7947ab9e477383bd24ed221bcf041e148e2d8f7ed0f97fe390d727); /* requirePre */ \nc_0xa126c9f9(0x96309fc97555ef27755b84e4bc9d819a08760a5ebc5c5d7c9e71d91834e70455); /* statement */ \nrequire(userAddressToLastNewProposalTimestamp[msg.sender].add(api3Pool.EPOCH_LENGTH()) < now, \"API3_HIT_PROPOSAL_COOLDOWN\");c_0xa126c9f9(0x1757a9d64495deaa491c691f6a524ba18934f155af569fe688550eafa36835de); /* requirePost */ \n\nc_0xa126c9f9(0xca69418a612e179c260ec8d46f8432c3e9818eb9443131d715cbc5b8de272d0f); /* line */ \n        c_0xa126c9f9(0xda88cc6409247eba9cee5cced924b735e0b4030763d2e1e02d91aa6b5f9954c6); /* statement */ \nuserAddressToLastNewProposalTimestamp[msg.sender] = now;\n\nc_0xa126c9f9(0xfe30ad1595d4b4d9a2703eb6473ce5f021f9ef325d42e4803a78ade52dc00cb8); /* line */ \n        c_0xa126c9f9(0x99b2c52d8e48025112f101aa325a815802408724c379dfa8380c052dc638d031); /* statement */ \nuint64 snapshotBlock = getBlockNumber64() - 1; // avoid double voting in this very block\n\nc_0xa126c9f9(0x2579ca03c038866aaf769c907631d09441303ddad0da6570f99dd8a24fd666d6); /* line */ \n        c_0xa126c9f9(0x18ec92ebeb845d3101ff2107a506b9a24658cb9cf6527ba69c00ec7660b8cd3f); /* statement */ \nuint256 votingPower = api3Pool.totalSupplyOneBlockAgo();\nc_0xa126c9f9(0x01e2c9448516ced719eff94704d56b839991871f2868026869193b8dcaea024e); /* line */ \n        c_0xa126c9f9(0xcfdd8709be26b27612e0a29d87dfd5348f2fb520d7095d5ac9cd00d1a723762b); /* requirePre */ \nc_0xa126c9f9(0xff8f0efda06303c2038b8281d65f203814d82f8470b5ae26996e61ff7e29910e); /* statement */ \nrequire(votingPower > 0, ERROR_NO_VOTING_POWER);c_0xa126c9f9(0x818241df244f3b1bbd66edcf6b5dc4cecc74e13091b03ad21ee2ec550b639fbd); /* requirePost */ \n\nc_0xa126c9f9(0xdc81895289f0e8965236a1aa5b463d10adeb3698b1da9e01190babc6a9e3dee7); /* line */ \n        c_0xa126c9f9(0xc1556a85dff89ab30f5de5f2f0587e9563d572d866688afff8026689e09b49a4); /* statement */ \nuint256 proposalMakerVotingPower = api3Pool.balanceOfAt(msg.sender, snapshotBlock);\nc_0xa126c9f9(0x466ee7e5a300c647a0353f0abd8f0f1c5d5c839e13ef18cb31a1ee0dfe2151c0); /* line */ \n        c_0xa126c9f9(0x4730426ba1ee489f2ba5f9329621045b4c123f83a8e4a6eeffae2860cafcec99); /* requirePre */ \nc_0xa126c9f9(0xf455b0c289448c3e56c619c659a06ee8a9c96c643fe240ee372150657e2ec7e8); /* statement */ \nrequire(\n            proposalMakerVotingPower >= votingPower.mul(api3Pool.proposalVotingPowerThreshold()).div(1e8),\n            \"API3_HIT_PROPOSAL_THRESHOLD\"\n            );c_0xa126c9f9(0xf425ff89655c23249b63e027958b82e36f452fb302bbb212e26c7c9fa60d569a); /* requirePost */ \n\nc_0xa126c9f9(0x186968eebe560dcb373b6720ec4059e638228ec7608680865e83726e0f9c6a59); /* line */ \n        c_0xa126c9f9(0x6303389e66e9e567c1447e5a1d55aa6121afcab547d80c501dc8ee1681b33810); /* statement */ \napi3Pool.updateLastVoteSnapshotBlock(snapshotBlock);\n\nc_0xa126c9f9(0x1d85ff03a73a1292a7fe6d1a7afecb9f92d02fc30ca1d4f7e17daf55cf14d347); /* line */ \n        c_0xa126c9f9(0xea6c7d58fe2d12a622e7095f179a756941927be3815348cdb3c2b65b506ce342); /* statement */ \nvoteId = votesLength++;\n\nc_0xa126c9f9(0x0bfa5c465837f0fc38b2297b43dc595214db15f7b5f3cfddced20d6cc731d669); /* line */ \n        c_0xa126c9f9(0x7403e90bacf055ff7f967c61fd22882c1f8789f71d57d3374a29735664c031be); /* statement */ \nVote storage vote_ = votes[voteId];\nc_0xa126c9f9(0x595da79f0484757e702758f96174ca0cb0eb9cfab5cf4aa7cb2aeec79a65728a); /* line */ \n        c_0xa126c9f9(0x254160749e252418bcf9982b87a23719b4df1b61a8d8cf5cd42c0cb31c121f85); /* statement */ \nvote_.startDate = getTimestamp64();\nc_0xa126c9f9(0xa32bcfa8b677984d787f4586c4b8d830f3b4cf030bbb586e97bc7514bb66333f); /* line */ \n        c_0xa126c9f9(0x5468a4158a85e33c40aff40a16c1a103f81120bac7aca59cd1866e66a5ca03bf); /* statement */ \nvote_.snapshotBlock = snapshotBlock;\nc_0xa126c9f9(0x0936da7978475080ef8e0207d272dc98375f416c008d95a52288b61d12ea8611); /* line */ \n        c_0xa126c9f9(0xfdd83e371ebb24efb3f9ecfe17fed10158bedda506a6ca0efd9f60297d2e6557); /* statement */ \nvote_.supportRequiredPct = supportRequiredPct;\nc_0xa126c9f9(0x98e7b39792186751b7cbf5028a9d5a60e492e147739cbb69ae586ea1695c8956); /* line */ \n        c_0xa126c9f9(0x6703a11cd2310458253efc63701a4da6d1886fb7fa44dd8df6adbd13fd9847cc); /* statement */ \nvote_.minAcceptQuorumPct = minAcceptQuorumPct;\nc_0xa126c9f9(0x9696ef1ffc924f9829be377e88ac8fb3fd0058f0dc91165219d3b028aebb978f); /* line */ \n        c_0xa126c9f9(0x2e9ac92dda58f5cddd1e53009735b4596b812c2f88932f81c6e1e044616b7e0b); /* statement */ \nvote_.votingPower = votingPower;\nc_0xa126c9f9(0x8dad650c57674ee83f7131a2f362969bbd1e258121c067a39db0bc845e8bd2d7); /* line */ \n        c_0xa126c9f9(0x0409d459e77484bfc5ec40a80fa344e713fbd92ab4015c5b9839b960f52dc7d5); /* statement */ \nvote_.executionScript = _executionScript;\n\nc_0xa126c9f9(0xab868e590f6ad6365c8ef59e95f37e2f1da47442116a3a54d0af0633632f006c); /* line */ \n        c_0xa126c9f9(0x80ef1ed014f6dac38907528f63ae183446e7fa46d5321f348d1050867b6ee14c); /* statement */ \nemit StartVote(voteId, msg.sender, _metadata);\n\nc_0xa126c9f9(0xbc0fb9d5d1d4b9acfdc5d39febe8db76458005563ab26022b74e990f575d2564); /* line */ \n        c_0xa126c9f9(0x22d6c51e539885dadc653fb25d0bac2db44b396b219493ab03cecd433cd82666); /* statement */ \nif (_castVote && _canVote(voteId, msg.sender)) {c_0xa126c9f9(0x2f48878a6a79d624820dccb8d890fd8833966a40e8f5a8f5554af0f812cfc5ad); /* branch */ \n\nc_0xa126c9f9(0x27162445addce6a83edb43b8630f49c28b7b3d6869c74d76e2d31c19cc6569d5); /* line */ \n            c_0xa126c9f9(0xae7b2da4f4ec7a09af015c3573798ecd2b7432ad0a6e70c64b3180dc007b9cf4); /* statement */ \n_vote(voteId, true, msg.sender, _executesIfDecided);\n        }else { c_0xa126c9f9(0x1617dbe2c6c5063e543f2fe3042bdbe96be26f9729ab14f5630df623ab80ed36); /* branch */ \n}\n    }\n\n    function _vote(\n        uint256 _voteId,\n        bool _supports,\n        address _voter,\n        bool _executesIfDecided\n    ) internal\n    {c_0xa126c9f9(0x129fb2ed41d48c22e403a0efea3fde372ed3ce4a333b573e2108caa9465c3f6d); /* function */ \n\nc_0xa126c9f9(0xa1bfe5eb85b02e4532af57c2c10c247a35d1238fdc8e8bf367b6a1c8825a1740); /* line */ \n        c_0xa126c9f9(0xc08b1acd08bcfe1f661e179d59cb49196320e315e4b71b4617eef424f5fceef2); /* statement */ \nVote storage vote_ = votes[_voteId];\n\n        // This could re-enter, though we can assume the governance token is not malicious\nc_0xa126c9f9(0x95d79bbeefc13d03e725a3bd8c1d628c2823291751492528e0d279b6238d3dfe); /* line */ \n        c_0xa126c9f9(0x21a253c204b5ada954ddbbb5dc141b951d05bd53c373897700e340c833519cbd); /* statement */ \nuint256 voterStake = api3Pool.balanceOfAt(_voter, vote_.snapshotBlock);\nc_0xa126c9f9(0x8b1b4a3860045630afa29e2b176cf8fe14d5bd2e84e9ecbb81df5b3148b7d4c0); /* line */ \n        c_0xa126c9f9(0xe8f3375d356d490625b82da3846eadd900b0722fc9057e6e4ff72750e66196b2); /* statement */ \nVoterState state = vote_.voters[_voter];\n\n        // If voter had previously voted, decrease count\nc_0xa126c9f9(0xbbda085d58765f9bd49e30067fac11108dd244f80851a163b214d45e257d8564); /* line */ \n        c_0xa126c9f9(0x905666831e2233f300d62e24e33368cea5b5396607678eafe96c1cf0d1e2c9f8); /* statement */ \nif (state == VoterState.Yea) {c_0xa126c9f9(0xd87b0f806e134afb1139b57571696e2a7f6b6cbfc790469245005c1e1dcbdacf); /* branch */ \n\nc_0xa126c9f9(0xc12d5de0cbbb52a4638a4308f276d26459b639adebfa3a75fd641964f239321d); /* line */ \n            c_0xa126c9f9(0xac064fa8552a57426c70fda404d66a6762b63671319b9236e7553704b91cc639); /* statement */ \nvote_.yea = vote_.yea.sub(voterStake);\n        } else {c_0xa126c9f9(0xd69d227d93ea323ebd5729401b34978c0da1f1cc22ac0da66b9453fe41f677d5); /* statement */ \nc_0xa126c9f9(0x067e62fd001dbc732df1273ff3be3cf8ebc259dc7caea8e9c7cdbeeaf6495164); /* branch */ \nif (state == VoterState.Nay) {c_0xa126c9f9(0xb41fb2df3b96eb14b397f4decc215a2c22a0ed2b10ac1faf0c172df00623818d); /* branch */ \n\nc_0xa126c9f9(0xe3669d1b1f0c70ca1b766019f242e722e1707376a636a1b12148af4868fedffe); /* line */ \n            c_0xa126c9f9(0x28380cb25ceeaa70781381fc6158ac2b5b29644705e11a65beda55d3996d8c67); /* statement */ \nvote_.nay = vote_.nay.sub(voterStake);\n        }else { c_0xa126c9f9(0x6941f548d0905556c77717cea53e426092ad98093f68520615ab007d0744df6f); /* branch */ \n}}\n\nc_0xa126c9f9(0x2e7397923d0bffc803d2a5cbf73455ff16e16af25b0ab5ca11cc9ad1db2bb641); /* line */ \n        c_0xa126c9f9(0xe1bfc725359843e0cc057cd8a11d8b04e5a74656af70e92c585c1a9354cd2814); /* statement */ \nif (_supports) {c_0xa126c9f9(0xcfb596dc280f0c89a1aca9a3945392611f99392cc234a743fe2c99d1583df74a); /* branch */ \n\nc_0xa126c9f9(0x9047688d86630f0ecca388ce02d333c6fed2cc8a09c5e52af9c921a2f581362f); /* line */ \n            c_0xa126c9f9(0xc5ed82dd99edf69a42cf2fbb1d705fcc2c93afb8ac73187971e9ee19a678c8c8); /* statement */ \nvote_.yea = vote_.yea.add(voterStake);\n        } else {c_0xa126c9f9(0x4b67a18a1c6a17d7f2672a810b5fbdaaa08e435d27237694066892a75acac6e0); /* branch */ \n\nc_0xa126c9f9(0xf2668e92d9272e2a71005e4a2adcd2eb18add91f5ac386e41c933d9284708fd2); /* line */ \n            c_0xa126c9f9(0x3c5c07c04323b3d3341dcf42d32aa935e314466d962421a4d2309a21af7a65fb); /* statement */ \nvote_.nay = vote_.nay.add(voterStake);\n        }\n\nc_0xa126c9f9(0xe610b032df65f92cea2a70d466241741a1d916e8745800f626191ada72bce2b4); /* line */ \n        c_0xa126c9f9(0x3917ae6a7d1289e03ce2960d028cba7a9953b34ac9587e06b91a7ad708494c10); /* statement */ \nvote_.voters[_voter] = _supports ? VoterState.Yea : VoterState.Nay;\n\nc_0xa126c9f9(0x8c1bb5fde1219d8928f894603e53c1e3d667f4e80345dfeb0fe4cbfebcdd01c5); /* line */ \n        c_0xa126c9f9(0x518899caed73584143a318368407537ef7f89e89037b3d86c144267da1feecc6); /* statement */ \nemit CastVote(_voteId, _voter, _supports, voterStake);\n\nc_0xa126c9f9(0xb74376148eaf8a4e0e9da8645a983ba12bcf46b1661df946a4ee8e7a6019cdec); /* line */ \n        c_0xa126c9f9(0x49ab89feb2c9836bd18daeb79b32eb2fb6c4c5fc5a32f2a9e007a07f0f04937b); /* statement */ \nif (_executesIfDecided && _canExecute(_voteId)) {c_0xa126c9f9(0x33b74a0500738c0b2061060e57f086a790fddfb3ee09224e8fa868c0f02edad1); /* branch */ \n\n            // We've already checked if the vote can be executed with `_canExecute()`\nc_0xa126c9f9(0xb48620f9a0a2e0ef50f857ceaf1f999353817927d6017296a01f2f21b59211c9); /* line */ \n            c_0xa126c9f9(0xe41b5104dca553ef3e7ddd2f620e33eaf75b07369691c3774d1061eacc86f221); /* statement */ \n_unsafeExecuteVote(_voteId);\n        }else { c_0xa126c9f9(0x2d0f22bf5aa734d1a0417a005984c9c8ea77ada9fae2de90402e999f2e9702d0); /* branch */ \n}\n    }\n\n    function _executeVote(uint256 _voteId) internal {c_0xa126c9f9(0x6dfda70432742a670a1372c065d070811b67ac1180c2c39dae32e591eba3a605); /* function */ \n\nc_0xa126c9f9(0xc387e9e10678f588bd95e131f2d54c941c83c3fba7ff2dd0cce69ffa5df7c4f9); /* line */ \n        c_0xa126c9f9(0x22e67f3a2e52660b313f0d9e3e5760da36dd8c261d10faa5eeb52f3e0b1d8edd); /* requirePre */ \nc_0xa126c9f9(0xf507ea87d407d70cf7adc2fdf0e7a71e4758b1124c063068cdbd9cd008521a5e); /* statement */ \nrequire(_canExecute(_voteId), ERROR_CAN_NOT_EXECUTE);c_0xa126c9f9(0xf6930d9d4e17d4799bd2816058b443f3e956fe972750edd0957a61721677c9f2); /* requirePost */ \n\nc_0xa126c9f9(0xb7127a2a5654f74d9ccb71660f94b6f54d6e59fad4ea299cea4931c85d47c117); /* line */ \n        c_0xa126c9f9(0xf10673793a359ced94512c12c1d45dcb7857704e541cde2342b6dd6023168a52); /* statement */ \n_unsafeExecuteVote(_voteId);\n    }\n\n    /**\n    * @dev Unsafe version of _executeVote that assumes you have already checked if the vote can be executed\n    */\n    function _unsafeExecuteVote(uint256 _voteId) internal {c_0xa126c9f9(0x748868084148fd03cbb66df25519563f2054a6fc8cb2fa557ed217cb0841be92); /* function */ \n\nc_0xa126c9f9(0x6403e3db12878363bd92dfe9bb8910f24bdb8b85e03680ca7199e1c86ea557fd); /* line */ \n        c_0xa126c9f9(0x80d698569777f42d0906c39255df73c53535b939a9dc51b02cf865ef282d22d8); /* statement */ \nVote storage vote_ = votes[_voteId];\n\nc_0xa126c9f9(0x1835321aa4d70d3a53e0f120fcb6422275f4f390fe5517ed3e800b3889d9b9c7); /* line */ \n        c_0xa126c9f9(0xc039459adbbad7a5adeddf4a0044fb2b8c0b89ad777ef930258bb4e65f19bbd6); /* statement */ \nvote_.executed = true;\n\nc_0xa126c9f9(0x1e34142e778bd539c267f4496413a09eed2e939afdbad5ebdade45d625f99255); /* line */ \n        c_0xa126c9f9(0xe0ce284a0f5875af5d395d37d2ee8ebfb488c5fdee2f74e7b74cbe98b725bc43); /* statement */ \nbytes memory input = new bytes(0); // TODO: Consider input for voting scripts\nc_0xa126c9f9(0x83391f6d731c2056d42de2af1fe6fb0504e40a2f91fe54a29911520f05c8780b); /* line */ \n        c_0xa126c9f9(0x65102f47fd04be4a526845f2715562ac6bd5e56f4f9aaac9dca6e6da4f84fe1b); /* statement */ \nrunScript(vote_.executionScript, input, new address[](0));\n\nc_0xa126c9f9(0x29643e06d6a8c9d2f34a0854faa8bfa03175628ecb0529e789d72aa45c06420d); /* line */ \n        c_0xa126c9f9(0x9a1e3dceaa392f2f8ba89536a253c3cc554281d79c5d2c73a91446c739a44d08); /* statement */ \nemit ExecuteVote(_voteId);\n    }\n\n    function _canExecute(uint256 _voteId) internal view returns (bool) {c_0xa126c9f9(0xd9dd92b59c1fae549cb88c64d1b49c727574bb5f10d247efdb596397093ae37f); /* function */ \n\nc_0xa126c9f9(0x07c046799c1d6a0734d7122d9d56b3d9a7fa3ecf22f87a342a9feb909bef9e3f); /* line */ \n        c_0xa126c9f9(0xccd40b8a018a06f5aa60007cc9aba0f648a5978a7bbfae881a8f559eff3fc30a); /* statement */ \nVote storage vote_ = votes[_voteId];\n\nc_0xa126c9f9(0xdbc2c91ea9da8e9aba8c7398b93ae072ded4975050f2a2f6dec24b0a89d73444); /* line */ \n        c_0xa126c9f9(0x8a2a9c555b4dd38ef7cf419f879f8166b0a1e9b8643b3d332deb188fbceac577); /* statement */ \nif (vote_.executed) {c_0xa126c9f9(0x680e6b10be704530299179d8a55ede55ac05ce7bb2da600c7648c114c6d823df); /* branch */ \n\nc_0xa126c9f9(0xf80ff7f6923bfa3b670ae84604a9e42f3f29e9e9395d31ee70e501e25eb49a90); /* line */ \n            c_0xa126c9f9(0x01c27684e5fd5caf9ea44a15b907b598829577ee33ab4c88689fbc7045032920); /* statement */ \nreturn false;\n        }else { c_0xa126c9f9(0xb52c5d671316ba6f69389e2d09d089244ebe1bf3f4a0b20cfb1556c1e0308ba0); /* branch */ \n}\n\n        // Voting is already decided\nc_0xa126c9f9(0xf8a66c55a39ed84a3d244baa4c3f6e428b5b5cbee9e289ff8e56e359b8578987); /* line */ \n        c_0xa126c9f9(0x15ae779374248ae197f7b31372fd13e94472d543dac1d3702f78749786cb5ff1); /* statement */ \nif (_isValuePct(vote_.yea, vote_.votingPower, vote_.supportRequiredPct)) {c_0xa126c9f9(0xa78fff2448a9aab171ec8b17aaf7e26c32c1c859cc713c4fc42dd142e894586e); /* branch */ \n\nc_0xa126c9f9(0x054906f6feec2c10612f9c6f4a5305c548aa36e1ac5c88c746d0527921ef35ef); /* line */ \n            c_0xa126c9f9(0xaa8d6c3911c547467a4cd11eea06f4b1d6d8c6a5fb16f258521f6fed160ce165); /* statement */ \nreturn true;\n        }else { c_0xa126c9f9(0xa5c4514b94a3ddb672dc7c03f99e5249e40b3ea39d597e13443b269201dc7aa5); /* branch */ \n}\n\n        // Vote ended?\nc_0xa126c9f9(0x9aa08b384bdf0abe91d4499709e916e2164ac96da4576a5c62e19dedc805662b); /* line */ \n        c_0xa126c9f9(0x4cc47a7dde4b1e1b7585026fc495b5df400a704298f5a0bba7b5cee63a6593f7); /* statement */ \nif (_isVoteOpen(vote_)) {c_0xa126c9f9(0xb60332c5860a9951fe7d0dbedbea7eebc484ac4878771f2568f8639ac4b7633d); /* branch */ \n\nc_0xa126c9f9(0x840929e767ae63c624bf02710e5853420b32ab5f6597386e0e749616949875d7); /* line */ \n            c_0xa126c9f9(0x4722135ed999fa5c28bcfb7c61ecb8c0f200490693211fa1030db8eff1419d4e); /* statement */ \nreturn false;\n        }else { c_0xa126c9f9(0x4ddfa9ccada3316e9f9eb224c517436aa5880e39d1ce5217b27980ce7377f4fd); /* branch */ \n}\n        // Has enough support?\nc_0xa126c9f9(0x0862f7abae9676ebffce543f9a1bbab2c0a5877fd6213b77bdcb4ced62662cd3); /* line */ \n        c_0xa126c9f9(0xaa988473885358ca6b8db6b46208830ee6a30a4ba40dbe1924b56707aa8e7dc0); /* statement */ \nuint256 totalVotes = vote_.yea.add(vote_.nay);\nc_0xa126c9f9(0x6ad4b313ad799d2780f3bba40194b1afa699a82bb219f8ae27f696d7043784ec); /* line */ \n        c_0xa126c9f9(0xe63917cf8be2cab54d889e271ce7a563a0082a8a7a2ddb1eb085ba861a9e6d69); /* statement */ \nif (!_isValuePct(vote_.yea, totalVotes, vote_.supportRequiredPct)) {c_0xa126c9f9(0x9860dc8d06b8e02f0e28b8f37063e76dbfdbcb174e999868ca3bded60d2252ad); /* branch */ \n\nc_0xa126c9f9(0xce235671bb7da77869290c624bf356fcbe406c5aea00ecb90b98c245504f74f0); /* line */ \n            c_0xa126c9f9(0x5f770191603455bec680494476fc7c03a00c6e01fdf77b225e5d13818b5f5b4e); /* statement */ \nreturn false;\n        }else { c_0xa126c9f9(0xf748aa2aa5edbf05f599ecff2a4f859b7a343fd0c6ba4283b7f78e4f4f4927f8); /* branch */ \n}\n        // Has min quorum?\nc_0xa126c9f9(0xb7a630769331ab3cbdddba328b473a0704ddbb01c5e7defabc196ce58c702690); /* line */ \n        c_0xa126c9f9(0x798560cddc75a95e82109e1f7f8353c75161749c2b591e96b21ce92b0b0091a4); /* statement */ \nif (!_isValuePct(vote_.yea, vote_.votingPower, vote_.minAcceptQuorumPct)) {c_0xa126c9f9(0xe213b4af27dd610da9ad9b15e4ff846bd5aa77bcbf614e54419a6665c97cdcdd); /* branch */ \n\nc_0xa126c9f9(0x98f706fb542b9bc05698fbec80c31305a66975ec17d44383333a5e797065ff32); /* line */ \n            c_0xa126c9f9(0xe3412e831c48b9bdd2c9378a2c476ce5efc68f1c1e76a69bf46cf0a2b701b66e); /* statement */ \nreturn false;\n        }else { c_0xa126c9f9(0xe5c2968d6104e3d1d0a2fb989200197ff3a398dbf1e71d43233822c32d8b8255); /* branch */ \n}\n\nc_0xa126c9f9(0x88ece6d9d719d569a352421b59984dccad2a2b041f078c8d71a14542f4ba38a6); /* line */ \n        c_0xa126c9f9(0x4fc493bf1cfc0e1b1f5cc22b3a5e90b326c07edd8615865d0b0c5a254790ec7b); /* statement */ \nreturn true;\n    }\n\n    function _canVote(uint256 _voteId, address _voter) internal view returns (bool) {c_0xa126c9f9(0xa6fd5db4a4616aaf2907bf567aa26bfb8633b283ef227d4087e3fceade8d9c87); /* function */ \n\nc_0xa126c9f9(0xf8e817431f0bad2b0c45bc34cb397fe06b01e391ca08bcfb493161a5e1838282); /* line */ \n        c_0xa126c9f9(0x89124622aadebbc80c6302b394f44b0cc2e5d28c4a80126c1fd630a0a8af4c1e); /* statement */ \nVote storage vote_ = votes[_voteId];\n\nc_0xa126c9f9(0x2a5182adfc6d5ee5d5d49b6a6219cffc82b2985dfb109e2d3009bc740368fa74); /* line */ \n        c_0xa126c9f9(0x1a7bdf72a5517fce7b399a9bd574fdf449e1ca6567b4b80681138e3b1b03c454); /* statement */ \nreturn _isVoteOpen(vote_) && api3Pool.balanceOfAt(_voter, vote_.snapshotBlock) > 0;\n    }\n\n    function _isVoteOpen(Vote storage vote_) internal view returns (bool) {c_0xa126c9f9(0x796581b8d9a8849caee7d68fe10b5c8f30eec377fa1f19c0b089e8af651efdf7); /* function */ \n\nc_0xa126c9f9(0xaffa139cc979731e0a631547bbf92b62149778704dff89a3eefd301e73ae8d53); /* line */ \n        c_0xa126c9f9(0x9f704b7d585bbd26599c165b14e45382861bc081bcbba37f452f17c6253bceaa); /* statement */ \nreturn getTimestamp64() < vote_.startDate.add(voteTime) && !vote_.executed;\n    }\n\n    /**\n    * @dev Calculates whether `_value` is more than a percentage `_pct` of `_total`\n    */\n    function _isValuePct(uint256 _value, uint256 _total, uint256 _pct) internal pure returns (bool) {c_0xa126c9f9(0x133ad77152e975969aa86e207c820ec9823dc01be8ca142555aab37c5738a0a6); /* function */ \n\nc_0xa126c9f9(0x78e35d8ae657e07f5124eca244ac3f22cef9dc7cde0bc776bab37d681a7444a9); /* line */ \n        c_0xa126c9f9(0x554c2ad3e6648187823d389c9da3622c67b9ff758aebf61a3ab68393088236de); /* statement */ \nif (_total == 0) {c_0xa126c9f9(0xecf6ecc8a0cd5c39032de96e80acba03180621c1fb4fb09af1b5020bdc0f466c); /* branch */ \n\nc_0xa126c9f9(0x5fb39319683997b595cdb7fd01ed8ec41bb2ddf18a3d4f268a82501cfc0bd6e3); /* line */ \n            c_0xa126c9f9(0xf012be6c85c5f963eb2c9a5d594e0dcca1e8780f3ed9be30ded681e1c9a6fe35); /* statement */ \nreturn false;\n        }else { c_0xa126c9f9(0x40f9283e8995e8c9e5fdf15f047db862516bd7c185e388c2bc6f60077256ac84); /* branch */ \n}\n\nc_0xa126c9f9(0x5dcb0a6a188809db3158b0068dc60d8c63efc1279522ca46943f76f6b012287b); /* line */ \n        c_0xa126c9f9(0x2e09b6210c73dbaa96da5e1d15fb9e6a187b981ab2e7a42e4268ad05be390d1c); /* statement */ \nuint256 computedPct = _value.mul(PCT_BASE) / _total;\nc_0xa126c9f9(0x4b414a0ab17a0e8b1a5905d3acde60c5535900fc1d0a42d6206f5add300ad77d); /* line */ \n        c_0xa126c9f9(0xe47fa972c1d458d625463ae630da900a27ebda8b59e0e1e698fe971d92f86cc2); /* statement */ \nreturn computedPct > _pct;\n    }\n}\n"
    },
    "@aragon/os/contracts/apps/AragonApp.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./AppStorage.sol\";\nimport \"../acl/ACLSyntaxSugar.sol\";\nimport \"../common/Autopetrified.sol\";\nimport \"../common/ConversionHelpers.sol\";\nimport \"../common/ReentrancyGuard.sol\";\nimport \"../common/VaultRecoverable.sol\";\nimport \"../evmscript/EVMScriptRunner.sol\";\n\n\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\n// that they can never be initialized.\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\n// are included so that they are automatically usable by subclassing contracts\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\n    string private constant ERROR_AUTH_FAILED = \"APP_AUTH_FAILED\";\n\n    modifier auth(bytes32 _role) {\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\n        _;\n    }\n\n    modifier authP(bytes32 _role, uint256[] _params) {\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\n        _;\n    }\n\n    /**\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\n    * @param _sender Sender of the call\n    * @param _role Role on this app\n    * @param _params Permission params for the role\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\n    *         Always returns false if the app hasn't been initialized yet.\n    */\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n        if (!hasInitialized()) {\n            return false;\n        }\n\n        IKernel linkedKernel = kernel();\n        if (address(linkedKernel) == address(0)) {\n            return false;\n        }\n\n        return linkedKernel.hasPermission(\n            _sender,\n            address(this),\n            _role,\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\n        );\n    }\n\n    /**\n    * @dev Get the recovery vault for the app\n    * @return Recovery vault address for the app\n    */\n    function getRecoveryVault() public view returns (address) {\n        // Funds recovery via a vault is only available when used with a kernel\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\n    }\n}\n"
    },
    "@aragon/os/contracts/apps/AppStorage.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../common/UnstructuredStorage.sol\";\nimport \"../kernel/IKernel.sol\";\n\n\ncontract AppStorage {\n    using UnstructuredStorage for bytes32;\n\n    /* Hardcoded constants to save gas\n    bytes32 internal constant KERNEL_POSITION = keccak256(\"aragonOS.appStorage.kernel\");\n    bytes32 internal constant APP_ID_POSITION = keccak256(\"aragonOS.appStorage.appId\");\n    */\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\n\n    function kernel() public view returns (IKernel) {\n        return IKernel(KERNEL_POSITION.getStorageAddress());\n    }\n\n    function appId() public view returns (bytes32) {\n        return APP_ID_POSITION.getStorageBytes32();\n    }\n\n    function setKernel(IKernel _kernel) internal {\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\n    }\n\n    function setAppId(bytes32 _appId) internal {\n        APP_ID_POSITION.setStorageBytes32(_appId);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/UnstructuredStorage.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\nlibrary UnstructuredStorage {\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\n        assembly { data := sload(position) }\n    }\n\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\n        assembly { data := sload(position) }\n    }\n\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n        assembly { data := sload(position) }\n    }\n\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n        assembly { data := sload(position) }\n    }\n\n    function setStorageBool(bytes32 position, bool data) internal {\n        assembly { sstore(position, data) }\n    }\n\n    function setStorageAddress(bytes32 position, address data) internal {\n        assembly { sstore(position, data) }\n    }\n\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\n        assembly { sstore(position, data) }\n    }\n\n    function setStorageUint256(bytes32 position, uint256 data) internal {\n        assembly { sstore(position, data) }\n    }\n}\n"
    },
    "@aragon/os/contracts/kernel/IKernel.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../acl/IACL.sol\";\nimport \"../common/IVaultRecoverable.sol\";\n\n\ninterface IKernelEvents {\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\n}\n\n\n// This should be an interface, but interfaces can't inherit yet :(\ncontract IKernel is IKernelEvents, IVaultRecoverable {\n    function acl() public view returns (IACL);\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\n}\n"
    },
    "@aragon/os/contracts/acl/IACL.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IACL {\n    function initialize(address permissionsCreator) external;\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n}\n"
    },
    "@aragon/os/contracts/common/IVaultRecoverable.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IVaultRecoverable {\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\n\n    function transferToVault(address token) external;\n\n    function allowRecoverability(address token) external view returns (bool);\n    function getRecoveryVault() external view returns (address);\n}\n"
    },
    "@aragon/os/contracts/acl/ACLSyntaxSugar.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract ACLSyntaxSugar {\n    function arr() internal pure returns (uint256[]) {\n        return new uint256[](0);\n    }\n\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\n        return arr(uint256(_a));\n    }\n\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b));\n    }\n\n    function arr(address _a) internal pure returns (uint256[] r) {\n        return arr(uint256(_a));\n    }\n\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b));\n    }\n\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), _b, _c);\n    }\n\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), _b, _c, _d);\n    }\n\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b));\n    }\n\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\n    }\n\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b), uint256(_c));\n    }\n\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b), uint256(_c));\n    }\n\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\n        r = new uint256[](1);\n        r[0] = _a;\n    }\n\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\n        r = new uint256[](2);\n        r[0] = _a;\n        r[1] = _b;\n    }\n\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n        r = new uint256[](3);\n        r[0] = _a;\n        r[1] = _b;\n        r[2] = _c;\n    }\n\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n        r = new uint256[](4);\n        r[0] = _a;\n        r[1] = _b;\n        r[2] = _c;\n        r[3] = _d;\n    }\n\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n        r = new uint256[](5);\n        r[0] = _a;\n        r[1] = _b;\n        r[2] = _c;\n        r[3] = _d;\n        r[4] = _e;\n    }\n}\n\n\ncontract ACLHelpers {\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\n        return uint8(_x >> (8 * 30));\n    }\n\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\n        return uint8(_x >> (8 * 31));\n    }\n\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\n        a = uint32(_x);\n        b = uint32(_x >> (8 * 4));\n        c = uint32(_x >> (8 * 8));\n    }\n}\n"
    },
    "@aragon/os/contracts/common/Autopetrified.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./Petrifiable.sol\";\n\n\ncontract Autopetrified is Petrifiable {\n    constructor() public {\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\n        // This renders them uninitializable (and unusable without a proxy).\n        petrify();\n    }\n}\n"
    },
    "@aragon/os/contracts/common/Petrifiable.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./Initializable.sol\";\n\n\ncontract Petrifiable is Initializable {\n    // Use block UINT256_MAX (which should be never) as the initializable date\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\n\n    function isPetrified() public view returns (bool) {\n        return getInitializationBlock() == PETRIFIED_BLOCK;\n    }\n\n    /**\n    * @dev Function to be called by top level contract to prevent being initialized.\n    *      Useful for freezing base contracts when they're used behind proxies.\n    */\n    function petrify() internal onlyInit {\n        initializedAt(PETRIFIED_BLOCK);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/Initializable.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./TimeHelpers.sol\";\nimport \"./UnstructuredStorage.sol\";\n\n\ncontract Initializable is TimeHelpers {\n    using UnstructuredStorage for bytes32;\n\n    // keccak256(\"aragonOS.initializable.initializationBlock\")\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\n\n    string private constant ERROR_ALREADY_INITIALIZED = \"INIT_ALREADY_INITIALIZED\";\n    string private constant ERROR_NOT_INITIALIZED = \"INIT_NOT_INITIALIZED\";\n\n    modifier onlyInit {\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\n        _;\n    }\n\n    modifier isInitialized {\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\n        _;\n    }\n\n    /**\n    * @return Block number in which the contract was initialized\n    */\n    function getInitializationBlock() public view returns (uint256) {\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\n    }\n\n    /**\n    * @return Whether the contract has been initialized by the time of the current block\n    */\n    function hasInitialized() public view returns (bool) {\n        uint256 initializationBlock = getInitializationBlock();\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\n    }\n\n    /**\n    * @dev Function to be called by top level contract after initialization has finished.\n    */\n    function initialized() internal onlyInit {\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\n    }\n\n    /**\n    * @dev Function to be called by top level contract after initialization to enable the contract\n    *      at a future block number rather than immediately.\n    */\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/TimeHelpers.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./Uint256Helpers.sol\";\n\n\ncontract TimeHelpers {\n    using Uint256Helpers for uint256;\n\n    /**\n    * @dev Returns the current block number.\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\n    *      tests.\n    */\n    function getBlockNumber() internal view returns (uint256) {\n        return block.number;\n    }\n\n    /**\n    * @dev Returns the current block number, converted to uint64.\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\n    *      tests.\n    */\n    function getBlockNumber64() internal view returns (uint64) {\n        return getBlockNumber().toUint64();\n    }\n\n    /**\n    * @dev Returns the current timestamp.\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n    *      tests.\n    */\n    function getTimestamp() internal view returns (uint256) {\n        return block.timestamp; // solium-disable-line security/no-block-members\n    }\n\n    /**\n    * @dev Returns the current timestamp, converted to uint64.\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n    *      tests.\n    */\n    function getTimestamp64() internal view returns (uint64) {\n        return getTimestamp().toUint64();\n    }\n}\n"
    },
    "@aragon/os/contracts/common/Uint256Helpers.sol": {
      "content": "pragma solidity ^0.4.24;\n\n\nlibrary Uint256Helpers {\n    uint256 private constant MAX_UINT64 = uint64(-1);\n\n    string private constant ERROR_NUMBER_TOO_BIG = \"UINT64_NUMBER_TOO_BIG\";\n\n    function toUint64(uint256 a) internal pure returns (uint64) {\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\n        return uint64(a);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/ConversionHelpers.sol": {
      "content": "pragma solidity ^0.4.24;\n\n\nlibrary ConversionHelpers {\n    string private constant ERROR_IMPROPER_LENGTH = \"CONVERSION_IMPROPER_LENGTH\";\n\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\n        // Force cast the uint256[] into a bytes array, by overwriting its length\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\n        // with the input and a new length. The input becomes invalid from this point forward.\n        uint256 byteLength = _input.length * 32;\n        assembly {\n            output := _input\n            mstore(output, byteLength)\n        }\n    }\n\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\n        // Force cast the bytes array into a uint256[], by overwriting its length\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\n        // with the input and a new length. The input becomes invalid from this point forward.\n        uint256 intsLength = _input.length / 32;\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\n\n        assembly {\n            output := _input\n            mstore(output, intsLength)\n        }\n    }\n}\n"
    },
    "@aragon/os/contracts/common/ReentrancyGuard.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../common/UnstructuredStorage.sol\";\n\n\ncontract ReentrancyGuard {\n    using UnstructuredStorage for bytes32;\n\n    /* Hardcoded constants to save gas\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\"aragonOS.reentrancyGuard.mutex\");\n    */\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\n\n    string private constant ERROR_REENTRANT = \"REENTRANCY_REENTRANT_CALL\";\n\n    modifier nonReentrant() {\n        // Ensure mutex is unlocked\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\n\n        // Lock mutex before function call\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\n\n        // Perform function call\n        _;\n\n        // Unlock mutex after function call\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/VaultRecoverable.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../lib/token/ERC20.sol\";\nimport \"./EtherTokenConstant.sol\";\nimport \"./IsContract.sol\";\nimport \"./IVaultRecoverable.sol\";\nimport \"./SafeERC20.sol\";\n\n\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\n    using SafeERC20 for ERC20;\n\n    string private constant ERROR_DISALLOWED = \"RECOVER_DISALLOWED\";\n    string private constant ERROR_VAULT_NOT_CONTRACT = \"RECOVER_VAULT_NOT_CONTRACT\";\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \"RECOVER_TOKEN_TRANSFER_FAILED\";\n\n    /**\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\n     *         but in case it does, this function allows one to recover them.\n     * @param _token Token balance to be sent to recovery vault.\n     */\n    function transferToVault(address _token) external {\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\n        address vault = getRecoveryVault();\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\n\n        uint256 balance;\n        if (_token == ETH) {\n            balance = address(this).balance;\n            vault.transfer(balance);\n        } else {\n            ERC20 token = ERC20(_token);\n            balance = token.staticBalanceOf(this);\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\n        }\n\n        emit RecoverToVault(vault, _token, balance);\n    }\n\n    /**\n    * @dev By default deriving from AragonApp makes it recoverable\n    * @param token Token address that would be recovered\n    * @return bool whether the app allows the recovery\n    */\n    function allowRecoverability(address token) public view returns (bool) {\n        return true;\n    }\n\n    // Cast non-implemented interface to be public so we can use it internally\n    function getRecoveryVault() public view returns (address);\n}\n"
    },
    "@aragon/os/contracts/lib/token/ERC20.sol": {
      "content": "// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function allowance(address _owner, address _spender)\n        public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function approve(address _spender, uint256 _value)\n        public returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
    },
    "@aragon/os/contracts/common/EtherTokenConstant.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\n// contracts where both tokens and ETH are accepted\ncontract EtherTokenConstant {\n    address internal constant ETH = address(0);\n}\n"
    },
    "@aragon/os/contracts/common/IsContract.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract IsContract {\n    /*\n    * NOTE: this should NEVER be used for authentication\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\n    *\n    * This is only intended to be used as a sanity check that an address is actually a contract,\n    * RATHER THAN an address not being a contract.\n    */\n    function isContract(address _target) internal view returns (bool) {\n        if (_target == address(0)) {\n            return false;\n        }\n\n        uint256 size;\n        assembly { size := extcodesize(_target) }\n        return size > 0;\n    }\n}\n"
    },
    "@aragon/os/contracts/common/SafeERC20.sol": {
      "content": "// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\n\npragma solidity ^0.4.24;\n\nimport \"../lib/token/ERC20.sol\";\n\n\nlibrary SafeERC20 {\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\n    // https://github.com/ethereum/solidity/issues/3544\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\n\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \"SAFE_ERC_20_BALANCE_REVERTED\";\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \"SAFE_ERC_20_ALLOWANCE_REVERTED\";\n\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\n        private\n        returns (bool)\n    {\n        bool ret;\n        assembly {\n            let ptr := mload(0x40)    // free memory pointer\n\n            let success := call(\n                gas,                  // forward all gas\n                _addr,                // address\n                0,                    // no value\n                add(_calldata, 0x20), // calldata start\n                mload(_calldata),     // calldata length\n                ptr,                  // write output over free memory\n                0x20                  // uint256 return\n            )\n\n            if gt(success, 0) {\n                // Check number of bytes returned from last function call\n                switch returndatasize\n\n                // No bytes returned: assume success\n                case 0 {\n                    ret := 1\n                }\n\n                // 32 bytes returned: check if non-zero\n                case 0x20 {\n                    // Only return success if returned data was true\n                    // Already have output in ptr\n                    ret := eq(mload(ptr), 1)\n                }\n\n                // Not sure what was returned: don't mark as success\n                default { }\n            }\n        }\n        return ret;\n    }\n\n    function staticInvoke(address _addr, bytes memory _calldata)\n        private\n        view\n        returns (bool, uint256)\n    {\n        bool success;\n        uint256 ret;\n        assembly {\n            let ptr := mload(0x40)    // free memory pointer\n\n            success := staticcall(\n                gas,                  // forward all gas\n                _addr,                // address\n                add(_calldata, 0x20), // calldata start\n                mload(_calldata),     // calldata length\n                ptr,                  // write output over free memory\n                0x20                  // uint256 return\n            )\n\n            if gt(success, 0) {\n                ret := mload(ptr)\n            }\n        }\n        return (success, ret);\n    }\n\n    /**\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\n    *      Note that this makes an external call to the token.\n    */\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\n        bytes memory transferCallData = abi.encodeWithSelector(\n            TRANSFER_SELECTOR,\n            _to,\n            _amount\n        );\n        return invokeAndCheckSuccess(_token, transferCallData);\n    }\n\n    /**\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\n    *      Note that this makes an external call to the token.\n    */\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\n        bytes memory transferFromCallData = abi.encodeWithSelector(\n            _token.transferFrom.selector,\n            _from,\n            _to,\n            _amount\n        );\n        return invokeAndCheckSuccess(_token, transferFromCallData);\n    }\n\n    /**\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\n    *      Note that this makes an external call to the token.\n    */\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\n        bytes memory approveCallData = abi.encodeWithSelector(\n            _token.approve.selector,\n            _spender,\n            _amount\n        );\n        return invokeAndCheckSuccess(_token, approveCallData);\n    }\n\n    /**\n    * @dev Static call into ERC20.balanceOf().\n    * Reverts if the call fails for some reason (should never fail).\n    */\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\n            _token.balanceOf.selector,\n            _owner\n        );\n\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\n\n        return tokenBalance;\n    }\n\n    /**\n    * @dev Static call into ERC20.allowance().\n    * Reverts if the call fails for some reason (should never fail).\n    */\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\n        bytes memory allowanceCallData = abi.encodeWithSelector(\n            _token.allowance.selector,\n            _owner,\n            _spender\n        );\n\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\n\n        return allowance;\n    }\n\n    /**\n    * @dev Static call into ERC20.totalSupply().\n    * Reverts if the call fails for some reason (should never fail).\n    */\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\n\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\n\n        return totalSupply;\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/EVMScriptRunner.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./IEVMScriptExecutor.sol\";\nimport \"./IEVMScriptRegistry.sol\";\n\nimport \"../apps/AppStorage.sol\";\nimport \"../kernel/KernelConstants.sol\";\nimport \"../common/Initializable.sol\";\n\n\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \"EVMRUN_EXECUTOR_UNAVAILABLE\";\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \"EVMRUN_PROTECTED_STATE_MODIFIED\";\n\n    /* This is manually crafted in assembly\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \"EVMRUN_EXECUTOR_INVALID_RETURN\";\n    */\n\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\n\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\n    }\n\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\n        return IEVMScriptRegistry(registryAddr);\n    }\n\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\n        internal\n        isInitialized\n        protectState\n        returns (bytes)\n    {\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\n\n        bytes4 sig = executor.execScript.selector;\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\n\n        bytes memory output;\n        assembly {\n            let success := delegatecall(\n                gas,                // forward all gas\n                executor,           // address\n                add(data, 0x20),    // calldata start\n                mload(data),        // calldata length\n                0,                  // don't write output (we'll handle this ourselves)\n                0                   // don't write output\n            )\n\n            output := mload(0x40) // free mem ptr get\n\n            switch success\n            case 0 {\n                // If the call errored, forward its full error data\n                returndatacopy(output, 0, returndatasize)\n                revert(output, returndatasize)\n            }\n            default {\n                switch gt(returndatasize, 0x3f)\n                case 0 {\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\n                    // revert with \"EVMRUN_EXECUTOR_INVALID_RETURN\"\n                    // See remix: doing a `revert(\"EVMRUN_EXECUTOR_INVALID_RETURN\")` always results in\n                    // this memory layout\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\n\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\n                }\n                default {\n                    // Copy result\n                    //\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\n                    //    [ output length (32 bytes) ]\n                    //    [ output content (N bytes) ]\n                    //\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\n                    let copysize := sub(returndatasize, 0x20)\n                    returndatacopy(output, 0x20, copysize)\n\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\n                }\n            }\n        }\n\n        emit ScriptResult(address(executor), _script, _input, output);\n\n        return output;\n    }\n\n    modifier protectState {\n        address preKernel = address(kernel());\n        bytes32 preAppId = appId();\n        _; // exec\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IEVMScriptExecutor {\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\n    function executorType() external pure returns (bytes32);\n}\n"
    },
    "@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./IEVMScriptExecutor.sol\";\n\n\ncontract EVMScriptRegistryConstants {\n    /* Hardcoded constants to save gas\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\"evmreg\");\n    */\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\n}\n\n\ninterface IEVMScriptRegistry {\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\n    function disableScriptExecutor(uint256 executorId) external;\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\n}\n"
    },
    "@aragon/os/contracts/kernel/KernelConstants.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract KernelAppIds {\n    /* Hardcoded constants to save gas\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\"kernel\");\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\"acl\");\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\"vault\");\n    */\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\n}\n\n\ncontract KernelNamespaceConstants {\n    /* Hardcoded constants to save gas\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\"core\");\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\"base\");\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\"app\");\n    */\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\n}\n"
    },
    "@aragon/os/contracts/common/IForwarder.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IForwarder {\n    function isForwarder() external pure returns (bool);\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function canForward(address sender, bytes evmCallScript) public view returns (bool);\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function forward(bytes evmCallScript) public;\n}\n"
    },
    "@aragon/os/contracts/lib/math/SafeMath.sol": {
      "content": "// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    string private constant ERROR_ADD_OVERFLOW = \"MATH_ADD_OVERFLOW\";\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH_SUB_UNDERFLOW\";\n    string private constant ERROR_MUL_OVERFLOW = \"MATH_MUL_OVERFLOW\";\n    string private constant ERROR_DIV_ZERO = \"MATH_DIV_ZERO\";\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\n        uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a, ERROR_ADD_OVERFLOW);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, ERROR_DIV_ZERO);\n        return a % b;\n    }\n}\n"
    },
    "@aragon/os/contracts/lib/math/SafeMath64.sol": {
      "content": "// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath64\n * @dev Math operations for uint64 with safety checks that revert on error\n */\nlibrary SafeMath64 {\n    string private constant ERROR_ADD_OVERFLOW = \"MATH64_ADD_OVERFLOW\";\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH64_SUB_UNDERFLOW\";\n    string private constant ERROR_MUL_OVERFLOW = \"MATH64_MUL_OVERFLOW\";\n    string private constant ERROR_DIV_ZERO = \"MATH64_DIV_ZERO\";\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\n        uint256 c = uint256(_a) * uint256(_b);\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\n\n        return uint64(c);\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\n        uint64 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\n        uint64 c = _a - _b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\n        uint64 c = _a + _b;\n        require(c >= _a, ERROR_ADD_OVERFLOW);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\n        require(b != 0, ERROR_DIV_ZERO);\n        return a % b;\n    }\n}\n"
    },
    ".coverage_contracts/interfaces/IApi3Pool.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.4.24;\n\ninterface IApi3Pool {\n    function EPOCH_LENGTH()\n        external\n        view\n        returns(uint256);\n\n    function proposalVotingPowerThreshold()\n        external\n        view\n        returns(uint256);\n\n    function balanceOfAt(\n        address userAddress,\n        uint256 _block\n        )\n        external\n        view\n        returns(uint256);\n\n    function totalSupplyOneBlockAgo()\n        external\n        view\n        returns(uint256);\n\n    function updateLastVoteSnapshotBlock(uint256 snapshotBlock)\n        external;\n}\n"
    },
    ".coverage_contracts/test/mocks/Api3TokenMock.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"@aragon/minime/contracts/MiniMeToken.sol\";\n\n\ncontract Api3TokenMock is MiniMeToken {\n    constructor(\n        MiniMeTokenFactory _tokenFactory,\n        MiniMeToken _parentToken,\n        uint _parentSnapShotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n        )\n        public\n        MiniMeToken(\n            _tokenFactory,\n            _parentToken,\n            _parentSnapShotBlock,\n            _tokenName,\n            _decimalUnits,\n            _tokenSymbol,\n            _transfersEnabled\n            )\n    {\n    }\n\n    uint256 private mockEPOCH_LENGTH = 0;\n    uint256 private mockProposalVotingPowerThreshold = 0;\n\n    function setEPOCH_LENGTH(uint256 _EPOCH_LENGTH)\n        external\n    {\n        mockEPOCH_LENGTH = _EPOCH_LENGTH;\n    }\n\n    function setProposalVotingPowerThreshold(uint256 _proposalVotingPowerThreshold)\n        external\n    {\n        mockProposalVotingPowerThreshold = _proposalVotingPowerThreshold;\n    }\n\n    function EPOCH_LENGTH()\n        external\n        view\n        returns(uint256)\n    {\n        return mockEPOCH_LENGTH;\n    }\n\n    function proposalVotingPowerThreshold()\n        external\n        view\n        returns(uint256)\n    {\n        return mockProposalVotingPowerThreshold;\n    }\n\n    function totalSupplyOneBlockAgo()\n        external\n        view\n        returns(uint256)\n    {\n        return totalSupplyAt(block.number - 1);\n    }\n\n    function updateLastVoteSnapshotBlock(uint256 snapshotBlock)\n        external\n    {\n    }\n\n    function getMinterStatus(address account)\n        external\n        returns (bool)\n    {\n        return false;\n    }\n}\n"
    },
    "@aragon/minime/contracts/MiniMeToken.sol": {
      "content": "pragma solidity ^0.4.24;\n\n/*\n    Copyright 2016, Jordi Baylina\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title MiniMeToken Contract\n/// @author Jordi Baylina\n/// @dev This token contract's goal is to make it easy for anyone to clone this\n///  token using the token distribution at a given block, this will allow DAO's\n///  and DApps to upgrade their features in a decentralized manner without\n///  affecting the original token\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\n\nimport \"./ITokenController.sol\";\n\ncontract Controlled {\n    /// @notice The address of the controller is the only address that can call\n    ///  a function with this modifier\n    modifier onlyController {\n        require(msg.sender == controller);\n        _;\n    }\n\n    address public controller;\n\n    function Controlled()  public { controller = msg.sender;}\n\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) onlyController  public {\n        controller = _newController;\n    }\n}\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(\n        address from,\n        uint256 _amount,\n        address _token,\n        bytes _data\n    ) public;\n}\n\n/// @dev The actual token contract, the default controller is the msg.sender\n///  that deploys the contract, so usually this token will be deployed by a\n///  token controller contract, which Giveth will call a \"Campaign\"\ncontract MiniMeToken is Controlled {\n\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\n    uint8 public decimals;             //Number of decimals of the smallest unit\n    string public symbol;              //An identifier: e.g. REP\n    string public version = \"MMT_0.1\"; //An arbitrary versioning scheme\n\n\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\n    ///  given value, the block number attached is the one that last changed the\n    ///  value\n    struct Checkpoint {\n\n        // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n        // `value` is the amount of tokens at a specific block number\n        uint128 value;\n    }\n\n    // `parentToken` is the Token address that was cloned to produce this token;\n    //  it will be 0x0 for a token that was not cloned\n    MiniMeToken public parentToken;\n\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\n    //  used to determine the initial distribution of the Clone Token\n    uint public parentSnapShotBlock;\n\n    // `creationBlock` is the block number that the Clone Token was created\n    uint public creationBlock;\n\n    // `balances` is the map that tracks the balance of each address, in this\n    //  contract when the balance changes the block number that the change\n    //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Tracks the history of the `totalSupply` of the token\n    Checkpoint[] totalSupplyHistory;\n\n    // Flag that determines if the token is transferable or not.\n    bool public transfersEnabled;\n\n    // The factory used to create new clone tokens\n    MiniMeTokenFactory public tokenFactory;\n\n////////////////\n// Constructor\n////////////////\n\n    /// @notice Constructor to create a MiniMeToken\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n    ///  will create the Clone token contracts, the token factory needs to be\n    ///  deployed first\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n    ///  new token\n    /// @param _parentSnapShotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token, set to 0 if it\n    ///  is a new token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    function MiniMeToken(\n        MiniMeTokenFactory _tokenFactory,\n        MiniMeToken _parentToken,\n        uint _parentSnapShotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    )  public\n    {\n        tokenFactory = _tokenFactory;\n        name = _tokenName;                                 // Set the name\n        decimals = _decimalUnits;                          // Set the decimals\n        symbol = _tokenSymbol;                             // Set the symbol\n        parentToken = _parentToken;\n        parentSnapShotBlock = _parentSnapShotBlock;\n        transfersEnabled = _transfersEnabled;\n        creationBlock = block.number;\n    }\n\n\n///////////////////\n// ERC20 Methods\n///////////////////\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n        return doTransfer(msg.sender, _to, _amount);\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n\n        // The controller of this contract can move tokens around at will,\n        //  this is important to recognize! Confirm that you trust the\n        //  controller of this contract, which in most situations should be\n        //  another open source smart contract or 0x0\n        if (msg.sender != controller) {\n            require(transfersEnabled);\n\n            // The standard ERC 20 transferFrom functionality\n            if (allowed[_from][msg.sender] < _amount)\n                return false;\n            allowed[_from][msg.sender] -= _amount;\n        }\n        return doTransfer(_from, _to, _amount);\n    }\n\n    /// @dev This is the actual transfer function in the token contract, it can\n    ///  only be called by other functions in this contract.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\n        if (_amount == 0) {\n            return true;\n        }\n        require(parentSnapShotBlock < block.number);\n        // Do not allow transfer to 0x0 or the token contract itself\n        require((_to != 0) && (_to != address(this)));\n        // If the amount being transfered is more than the balance of the\n        //  account the transfer returns false\n        var previousBalanceFrom = balanceOfAt(_from, block.number);\n        if (previousBalanceFrom < _amount) {\n            return false;\n        }\n        // Alerts the token controller of the transfer\n        if (isContract(controller)) {\n            // Adding the ` == true` makes the linter shut up so...\n            require(ITokenController(controller).onTransfer(_from, _to, _amount) == true);\n        }\n        // First update the balance array with the new value for the address\n        //  sending the tokens\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n        // Then update the balance array with the new value for the address\n        //  receiving the tokens\n        var previousBalanceTo = balanceOfAt(_to, block.number);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n        // An event to make the transfer easy to find on the blockchain\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n        // Alerts the token controller of the approve function call\n        if (isContract(controller)) {\n            // Adding the ` == true` makes the linter shut up so...\n            require(ITokenController(controller).onApprove(msg.sender, _spender, _amount) == true);\n        }\n\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n    ///  its behalf, and then a function is triggered in the contract that is\n    ///  being approved, `_spender`. This allows users to use their tokens to\n    ///  interact with contracts in one function call instead of two\n    /// @param _spender The address of the contract able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the function call was successful\n    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\n        require(approve(_spender, _amount));\n\n        _spender.receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return true;\n    }\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply() public constant returns (uint) {\n        return totalSupplyAt(block.number);\n    }\n\n\n////////////////\n// Query balance and totalSupply in History\n////////////////\n\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    /// @param _owner The address from which the balance will be retrieved\n    /// @param _blockNumber The block number when the balance is queried\n    /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\n\n        // These next few lines are used when the balance of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.balanceOfAt` be queried at the\n        //  genesis block for that token as this contains initial balance of\n        //  this token\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n            } else {\n                // Has no parent\n                return 0;\n            }\n\n        // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\n    /// @param _blockNumber The block number when the totalSupply is queried\n    /// @return The total amount of tokens at `_blockNumber`\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n\n        // These next few lines are used when the totalSupply of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\n        //  genesis block for this token as that contains totalSupply of this\n        //  token at this block number.\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n            } else {\n                return 0;\n            }\n\n        // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n////////////////\n// Clone Token Method\n////////////////\n\n    /// @notice Creates a new clone token with the initial distribution being\n    ///  this token at `_snapshotBlock`\n    /// @param _cloneTokenName Name of the clone token\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n    /// @param _cloneTokenSymbol Symbol of the clone token\n    /// @param _snapshotBlock Block when the distribution of the parent token is\n    ///  copied to set the initial distribution of the new clone token;\n    ///  if the block is zero than the actual block, the current block is used\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    /// @return The address of the new MiniMeToken Contract\n    function createCloneToken(\n        string _cloneTokenName,\n        uint8 _cloneDecimalUnits,\n        string _cloneTokenSymbol,\n        uint _snapshotBlock,\n        bool _transfersEnabled\n    ) public returns(MiniMeToken)\n    {\n        uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n            this,\n            snapshot,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n        );\n\n        cloneToken.changeController(msg.sender);\n\n        // An event to make the token easy to find on the blockchain\n        NewCloneToken(address(cloneToken), snapshot);\n        return cloneToken;\n    }\n\n////////////////\n// Generate and destroy tokens\n////////////////\n\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n    /// @param _owner The address that will be assigned the new tokens\n    /// @param _amount The quantity of tokens generated\n    /// @return True if the tokens are generated correctly\n    function generateTokens(address _owner, uint _amount) onlyController public returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n        uint previousBalanceTo = balanceOf(_owner);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n        Transfer(0, _owner, _amount);\n        return true;\n    }\n\n\n    /// @notice Burns `_amount` tokens from `_owner`\n    /// @param _owner The address that will lose the tokens\n    /// @param _amount The quantity of tokens to burn\n    /// @return True if the tokens are burned correctly\n    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply >= _amount);\n        uint previousBalanceFrom = balanceOf(_owner);\n        require(previousBalanceFrom >= _amount);\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n        Transfer(_owner, 0, _amount);\n        return true;\n    }\n\n////////////////\n// Enable tokens transfers\n////////////////\n\n\n    /// @notice Enables token holders to transfer their tokens freely if true\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    function enableTransfers(bool _transfersEnabled) onlyController public {\n        transfersEnabled = _transfersEnabled;\n    }\n\n////////////////\n// Internal helper functions to query and set a value in a snapshot array\n////////////////\n\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n    /// @param checkpoints The history of values being queried\n    /// @param _block The block number to retrieve the value at\n    /// @return The number of tokens being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\n        if (checkpoints.length == 0)\n            return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock)\n            return 0;\n\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length-1;\n        while (max > min) {\n            uint mid = (max + min + 1) / 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\n    ///  `totalSupplyHistory`\n    /// @param checkpoints The history of data being updated\n    /// @param _value The new number of tokens\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\n        require(_value <= uint128(-1));\n\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n            newCheckPoint.fromBlock = uint128(block.number);\n            newCheckPoint.value = uint128(_value);\n        } else {\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\n            oldCheckPoint.value = uint128(_value);\n        }\n    }\n\n    /// @dev Internal function to determine if an address is a contract\n    /// @param _addr The address being queried\n    /// @return True if `_addr` is a contract\n    function isContract(address _addr) constant internal returns(bool) {\n        uint size;\n        if (_addr == 0)\n            return false;\n\n        assembly {\n            size := extcodesize(_addr)\n        }\n\n        return size>0;\n    }\n\n    /// @dev Helper function to return a min betwen the two uints\n    function min(uint a, uint b) pure internal returns (uint) {\n        return a < b ? a : b;\n    }\n\n    /// @notice The fallback function: If the contract's controller has not been\n    ///  set to 0, then the `proxyPayment` method is called which relays the\n    ///  ether and creates tokens as described in the token controller contract\n    function () external payable {\n        require(isContract(controller));\n        // Adding the ` == true` makes the linter shut up so...\n        require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true);\n    }\n\n//////////\n// Safety Methods\n//////////\n\n    /// @notice This method can be used by the controller to extract mistakenly\n    ///  sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    ///  set to 0 in case you want to extract ether.\n    function claimTokens(address _token) onlyController public {\n        if (_token == 0x0) {\n            controller.transfer(this.balance);\n            return;\n        }\n\n        MiniMeToken token = MiniMeToken(_token);\n        uint balance = token.balanceOf(this);\n        token.transfer(controller, balance);\n        ClaimedTokens(_token, controller, balance);\n    }\n\n////////////////\n// Events\n////////////////\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount\n        );\n\n}\n\n\n////////////////\n// MiniMeTokenFactory\n////////////////\n\n/// @dev This contract is used to generate clone contracts from a contract.\n///  In solidity this is the way to create a contract from a contract of the\n///  same class\ncontract MiniMeTokenFactory {\n    event NewFactoryCloneToken(address indexed _cloneToken, address indexed _parentToken, uint _snapshotBlock);\n\n    /// @notice Update the DApp by creating a new token with new functionalities\n    ///  the msg.sender becomes the controller of this clone token\n    /// @param _parentToken Address of the token being cloned\n    /// @param _snapshotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    /// @return The address of the new token contract\n    function createCloneToken(\n        MiniMeToken _parentToken,\n        uint _snapshotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) public returns (MiniMeToken)\n    {\n        MiniMeToken newToken = new MiniMeToken(\n            this,\n            _parentToken,\n            _snapshotBlock,\n            _tokenName,\n            _decimalUnits,\n            _tokenSymbol,\n            _transfersEnabled\n        );\n\n        newToken.changeController(msg.sender);\n        NewFactoryCloneToken(address(newToken), address(_parentToken), _snapshotBlock);\n        return newToken;\n    }\n}"
    },
    "@aragon/minime/contracts/ITokenController.sol": {
      "content": "pragma solidity ^0.4.24;\n\n/// @dev The token controller contract must implement these functions\n\n\ninterface ITokenController {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) external payable returns(bool);\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);\n}\n"
    },
    ".coverage_contracts/test/mocks/Api3VotingMock.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../../Api3Voting.sol\";\nimport \"./Api3TokenMock.sol\";\nimport \"@aragon/contract-helpers-test/contracts/0.4/aragonOS/TimeHelpersMock.sol\";\n\n\ncontract Api3VotingMock is Api3Voting, TimeHelpersMock {\n    /* Ugly hack to work around this issue:\n     * https://github.com/trufflesuite/truffle/issues/569\n     * https://github.com/trufflesuite/truffle/issues/737\n     */\n    function newVoteExt(bytes _executionScript, string _metadata, bool _castVote, bool _executesIfDecided)\n        external\n        returns (uint256 voteId)\n    {\n        voteId = _newVote(_executionScript, _metadata, _castVote, _executesIfDecided);\n        emit StartVote(voteId, msg.sender, _metadata);\n    }\n\n    // _isValuePct public wrapper\n    function isValuePct(uint256 _value, uint256 _total, uint256 _pct) external pure returns (bool) {\n        return _isValuePct(_value, _total, _pct);\n    }\n\n    // Mint a token and create a vote in the same transaction to test snapshot block values are correct\n    function newTokenAndVote(address _holder, uint256 _tokenAmount, string _metadata)\n        external\n        returns (uint256 voteId)\n    {\n        Api3TokenMock token = Api3TokenMock(address(api3Pool));\n        token.generateTokens(_holder, _tokenAmount);\n\n        bytes memory noScript = new bytes(0);\n        voteId = _newVote(noScript, _metadata, false, false);\n        emit StartVote(voteId, msg.sender, _metadata);\n    }\n}\n"
    },
    "@aragon/contract-helpers-test/contracts/0.4/aragonOS/TimeHelpersMock.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"@aragon/os/contracts/common/TimeHelpers.sol\";\nimport \"@aragon/os/contracts/lib/math/SafeMath.sol\";\nimport \"@aragon/os/contracts/lib/math/SafeMath64.sol\";\n\n\ncontract TimeHelpersMock is TimeHelpers {\n    using SafeMath for uint256;\n    using SafeMath64 for uint64;\n\n    uint256 public mockedTimestamp;\n    uint256 public mockedBlockNumber;\n\n    /**\n    * @dev Sets a mocked timestamp value, used only for testing purposes\n    */\n    function mockSetTimestamp(uint256 _timestamp) external {\n        mockedTimestamp = _timestamp;\n    }\n\n    /**\n    * @dev Increases the mocked timestamp value, used only for testing purposes\n    */\n    function mockIncreaseTime(uint256 _seconds) external {\n        if (mockedTimestamp != 0) mockedTimestamp = mockedTimestamp.add(_seconds);\n        else mockedTimestamp = block.timestamp.add(_seconds);\n    }\n\n    /**\n    * @dev Decreases the mocked timestamp value, used only for testing purposes\n    */\n    function mockDecreaseTime(uint256 _seconds) external {\n        if (mockedTimestamp != 0) mockedTimestamp = mockedTimestamp.sub(_seconds);\n        else mockedTimestamp = block.timestamp.sub(_seconds);\n    }\n\n    /**\n    * @dev Advances the mocked block number value, used only for testing purposes\n    */\n    function mockAdvanceBlocks(uint256 _number) external {\n        if (mockedBlockNumber != 0) mockedBlockNumber = mockedBlockNumber.add(_number);\n        else mockedBlockNumber = block.number.add(_number);\n    }\n\n    /**\n    * @dev Returns the mocked timestamp value\n    */\n    function getTimestampPublic() external view returns (uint64) {\n        return getTimestamp64();\n    }\n\n    /**\n    * @dev Returns the mocked block number value\n    */\n    function getBlockNumberPublic() external view returns (uint256) {\n        return getBlockNumber();\n    }\n\n    /**\n    * @dev Returns the mocked timestamp if it was set, or current `block.timestamp`\n    */\n    function getTimestamp() internal view returns (uint256) {\n        if (mockedTimestamp != 0) return mockedTimestamp;\n        return super.getTimestamp();\n    }\n\n    /**\n    * @dev Returns the mocked block number if it was set, or current `block.number`\n    */\n    function getBlockNumber() internal view returns (uint256) {\n        if (mockedBlockNumber != 0) return mockedBlockNumber;\n        return super.getBlockNumber();\n    }\n}\n"
    },
    ".coverage_contracts/test/TestImports.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"@aragon/os/contracts/acl/ACL.sol\";\nimport \"@aragon/os/contracts/kernel/Kernel.sol\";\nimport \"@aragon/os/contracts/factory/DAOFactory.sol\";\nimport \"@aragon/os/contracts/factory/EVMScriptRegistryFactory.sol\";\n\nimport \"@aragon/contract-helpers-test/contracts/0.4/misc/ExecutionTarget.sol\";\n\n// You might think this file is a bit odd, but let me explain.\n// We only use some contracts in our tests, which means Truffle\n// will not compile it for us, because it is from an external\n// dependency.\n//\n// We are now left with three options:\n// - Copy/paste these contracts\n// - Run the tests with `truffle compile --all` on\n// - Or trick Truffle by claiming we use it in a Solidity test\n//\n// You know which one I went for.\n\n\ncontract TestImports {\n    constructor() public {\n        // solium-disable-previous-line no-empty-blocks\n    }\n}\n"
    },
    "@aragon/os/contracts/acl/ACL.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../apps/AragonApp.sol\";\nimport \"../common/ConversionHelpers.sol\";\nimport \"../common/TimeHelpers.sol\";\nimport \"./ACLSyntaxSugar.sol\";\nimport \"./IACL.sol\";\nimport \"./IACLOracle.sol\";\n\n\n/* solium-disable function-order */\n// Allow public initialize() to be first\ncontract ACL is IACL, TimeHelpers, AragonApp, ACLHelpers {\n    /* Hardcoded constants to save gas\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = keccak256(\"CREATE_PERMISSIONS_ROLE\");\n    */\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = 0x0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a;\n\n    enum Op { NONE, EQ, NEQ, GT, LT, GTE, LTE, RET, NOT, AND, OR, XOR, IF_ELSE } // op types\n\n    struct Param {\n        uint8 id;\n        uint8 op;\n        uint240 value; // even though value is an uint240 it can store addresses\n        // in the case of 32 byte hashes losing 2 bytes precision isn't a huge deal\n        // op and id take less than 1 byte each so it can be kept in 1 sstore\n    }\n\n    uint8 internal constant BLOCK_NUMBER_PARAM_ID = 200;\n    uint8 internal constant TIMESTAMP_PARAM_ID    = 201;\n    // 202 is unused\n    uint8 internal constant ORACLE_PARAM_ID       = 203;\n    uint8 internal constant LOGIC_OP_PARAM_ID     = 204;\n    uint8 internal constant PARAM_VALUE_PARAM_ID  = 205;\n    // TODO: Add execution times param type?\n\n    /* Hardcoded constant to save gas\n    bytes32 public constant EMPTY_PARAM_HASH = keccak256(uint256(0));\n    */\n    bytes32 public constant EMPTY_PARAM_HASH = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\n    bytes32 public constant NO_PERMISSION = bytes32(0);\n    address public constant ANY_ENTITY = address(-1);\n    address public constant BURN_ENTITY = address(1); // address(0) is already used as \"no permission manager\"\n\n    string private constant ERROR_AUTH_INIT_KERNEL = \"ACL_AUTH_INIT_KERNEL\";\n    string private constant ERROR_AUTH_NO_MANAGER = \"ACL_AUTH_NO_MANAGER\";\n    string private constant ERROR_EXISTENT_MANAGER = \"ACL_EXISTENT_MANAGER\";\n\n    // Whether someone has a permission\n    mapping (bytes32 => bytes32) internal permissions; // permissions hash => params hash\n    mapping (bytes32 => Param[]) internal permissionParams; // params hash => params\n\n    // Who is the manager of a permission\n    mapping (bytes32 => address) internal permissionManager;\n\n    event SetPermission(address indexed entity, address indexed app, bytes32 indexed role, bool allowed);\n    event SetPermissionParams(address indexed entity, address indexed app, bytes32 indexed role, bytes32 paramsHash);\n    event ChangePermissionManager(address indexed app, bytes32 indexed role, address indexed manager);\n\n    modifier onlyPermissionManager(address _app, bytes32 _role) {\n        require(msg.sender == getPermissionManager(_app, _role), ERROR_AUTH_NO_MANAGER);\n        _;\n    }\n\n    modifier noPermissionManager(address _app, bytes32 _role) {\n        // only allow permission creation (or re-creation) when there is no manager\n        require(getPermissionManager(_app, _role) == address(0), ERROR_EXISTENT_MANAGER);\n        _;\n    }\n\n    /**\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\n    * @notice Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions\n    * @param _permissionsCreator Entity that will be given permission over createPermission\n    */\n    function initialize(address _permissionsCreator) public onlyInit {\n        initialized();\n        require(msg.sender == address(kernel()), ERROR_AUTH_INIT_KERNEL);\n\n        _createPermission(_permissionsCreator, this, CREATE_PERMISSIONS_ROLE, _permissionsCreator);\n    }\n\n    /**\n    * @dev Creates a permission that wasn't previously set and managed.\n    *      If a created permission is removed it is possible to reset it with createPermission.\n    *      This is the **ONLY** way to create permissions and set managers to permissions that don't\n    *      have a manager.\n    *      In terms of the ACL being initialized, this function implicitly protects all the other\n    *      state-changing external functions, as they all require the sender to be a manager.\n    * @notice Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\n    * @param _role Identifier for the group of actions in app given access to perform\n    * @param _manager Address of the entity that will be able to grant and revoke the permission further.\n    */\n    function createPermission(address _entity, address _app, bytes32 _role, address _manager)\n        external\n        auth(CREATE_PERMISSIONS_ROLE)\n        noPermissionManager(_app, _role)\n    {\n        _createPermission(_entity, _app, _role, _manager);\n    }\n\n    /**\n    * @dev Grants permission if allowed. This requires `msg.sender` to be the permission manager\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\n    * @param _role Identifier for the group of actions in app given access to perform\n    */\n    function grantPermission(address _entity, address _app, bytes32 _role)\n        external\n    {\n        grantPermissionP(_entity, _app, _role, new uint256[](0));\n    }\n\n    /**\n    * @dev Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\n    * @param _role Identifier for the group of actions in app given access to perform\n    * @param _params Permission parameters\n    */\n    function grantPermissionP(address _entity, address _app, bytes32 _role, uint256[] _params)\n        public\n        onlyPermissionManager(_app, _role)\n    {\n        bytes32 paramsHash = _params.length > 0 ? _saveParams(_params) : EMPTY_PARAM_HASH;\n        _setPermission(_entity, _app, _role, paramsHash);\n    }\n\n    /**\n    * @dev Revokes permission if allowed. This requires `msg.sender` to be the the permission manager\n    * @notice Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`\n    * @param _entity Address of the whitelisted entity to revoke access from\n    * @param _app Address of the app in which the role will be revoked\n    * @param _role Identifier for the group of actions in app being revoked\n    */\n    function revokePermission(address _entity, address _app, bytes32 _role)\n        external\n        onlyPermissionManager(_app, _role)\n    {\n        _setPermission(_entity, _app, _role, NO_PERMISSION);\n    }\n\n    /**\n    * @notice Set `_newManager` as the manager of `_role` in `_app`\n    * @param _newManager Address for the new manager\n    * @param _app Address of the app in which the permission management is being transferred\n    * @param _role Identifier for the group of actions being transferred\n    */\n    function setPermissionManager(address _newManager, address _app, bytes32 _role)\n        external\n        onlyPermissionManager(_app, _role)\n    {\n        _setPermissionManager(_newManager, _app, _role);\n    }\n\n    /**\n    * @notice Remove the manager of `_role` in `_app`\n    * @param _app Address of the app in which the permission is being unmanaged\n    * @param _role Identifier for the group of actions being unmanaged\n    */\n    function removePermissionManager(address _app, bytes32 _role)\n        external\n        onlyPermissionManager(_app, _role)\n    {\n        _setPermissionManager(address(0), _app, _role);\n    }\n\n    /**\n    * @notice Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\n    * @param _app Address of the app in which the permission is being burned\n    * @param _role Identifier for the group of actions being burned\n    */\n    function createBurnedPermission(address _app, bytes32 _role)\n        external\n        auth(CREATE_PERMISSIONS_ROLE)\n        noPermissionManager(_app, _role)\n    {\n        _setPermissionManager(BURN_ENTITY, _app, _role);\n    }\n\n    /**\n    * @notice Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\n    * @param _app Address of the app in which the permission is being burned\n    * @param _role Identifier for the group of actions being burned\n    */\n    function burnPermissionManager(address _app, bytes32 _role)\n        external\n        onlyPermissionManager(_app, _role)\n    {\n        _setPermissionManager(BURN_ENTITY, _app, _role);\n    }\n\n    /**\n     * @notice Get parameters for permission array length\n     * @param _entity Address of the whitelisted entity that will be able to perform the role\n     * @param _app Address of the app\n     * @param _role Identifier for a group of actions in app\n     * @return Length of the array\n     */\n    function getPermissionParamsLength(address _entity, address _app, bytes32 _role) external view returns (uint) {\n        return permissionParams[permissions[permissionHash(_entity, _app, _role)]].length;\n    }\n\n    /**\n    * @notice Get parameter for permission\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\n    * @param _app Address of the app\n    * @param _role Identifier for a group of actions in app\n    * @param _index Index of parameter in the array\n    * @return Parameter (id, op, value)\n    */\n    function getPermissionParam(address _entity, address _app, bytes32 _role, uint _index)\n        external\n        view\n        returns (uint8, uint8, uint240)\n    {\n        Param storage param = permissionParams[permissions[permissionHash(_entity, _app, _role)]][_index];\n        return (param.id, param.op, param.value);\n    }\n\n    /**\n    * @dev Get manager for permission\n    * @param _app Address of the app\n    * @param _role Identifier for a group of actions in app\n    * @return address of the manager for the permission\n    */\n    function getPermissionManager(address _app, bytes32 _role) public view returns (address) {\n        return permissionManager[roleHash(_app, _role)];\n    }\n\n    /**\n    * @dev Function called by apps to check ACL on kernel or to check permission statu\n    * @param _who Sender of the original call\n    * @param _where Address of the app\n    * @param _where Identifier for a group of actions in app\n    * @param _how Permission parameters\n    * @return boolean indicating whether the ACL allows the role or not\n    */\n    function hasPermission(address _who, address _where, bytes32 _what, bytes memory _how) public view returns (bool) {\n        return hasPermission(_who, _where, _what, ConversionHelpers.dangerouslyCastBytesToUintArray(_how));\n    }\n\n    function hasPermission(address _who, address _where, bytes32 _what, uint256[] memory _how) public view returns (bool) {\n        bytes32 whoParams = permissions[permissionHash(_who, _where, _what)];\n        if (whoParams != NO_PERMISSION && evalParams(whoParams, _who, _where, _what, _how)) {\n            return true;\n        }\n\n        bytes32 anyParams = permissions[permissionHash(ANY_ENTITY, _where, _what)];\n        if (anyParams != NO_PERMISSION && evalParams(anyParams, ANY_ENTITY, _where, _what, _how)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function hasPermission(address _who, address _where, bytes32 _what) public view returns (bool) {\n        uint256[] memory empty = new uint256[](0);\n        return hasPermission(_who, _where, _what, empty);\n    }\n\n    function evalParams(\n        bytes32 _paramsHash,\n        address _who,\n        address _where,\n        bytes32 _what,\n        uint256[] _how\n    ) public view returns (bool)\n    {\n        if (_paramsHash == EMPTY_PARAM_HASH) {\n            return true;\n        }\n\n        return _evalParam(_paramsHash, 0, _who, _where, _what, _how);\n    }\n\n    /**\n    * @dev Internal createPermission for access inside the kernel (on instantiation)\n    */\n    function _createPermission(address _entity, address _app, bytes32 _role, address _manager) internal {\n        _setPermission(_entity, _app, _role, EMPTY_PARAM_HASH);\n        _setPermissionManager(_manager, _app, _role);\n    }\n\n    /**\n    * @dev Internal function called to actually save the permission\n    */\n    function _setPermission(address _entity, address _app, bytes32 _role, bytes32 _paramsHash) internal {\n        permissions[permissionHash(_entity, _app, _role)] = _paramsHash;\n        bool entityHasPermission = _paramsHash != NO_PERMISSION;\n        bool permissionHasParams = entityHasPermission && _paramsHash != EMPTY_PARAM_HASH;\n\n        emit SetPermission(_entity, _app, _role, entityHasPermission);\n        if (permissionHasParams) {\n            emit SetPermissionParams(_entity, _app, _role, _paramsHash);\n        }\n    }\n\n    function _saveParams(uint256[] _encodedParams) internal returns (bytes32) {\n        bytes32 paramHash = keccak256(abi.encodePacked(_encodedParams));\n        Param[] storage params = permissionParams[paramHash];\n\n        if (params.length == 0) { // params not saved before\n            for (uint256 i = 0; i < _encodedParams.length; i++) {\n                uint256 encodedParam = _encodedParams[i];\n                Param memory param = Param(decodeParamId(encodedParam), decodeParamOp(encodedParam), uint240(encodedParam));\n                params.push(param);\n            }\n        }\n\n        return paramHash;\n    }\n\n    function _evalParam(\n        bytes32 _paramsHash,\n        uint32 _paramId,\n        address _who,\n        address _where,\n        bytes32 _what,\n        uint256[] _how\n    ) internal view returns (bool)\n    {\n        if (_paramId >= permissionParams[_paramsHash].length) {\n            return false; // out of bounds\n        }\n\n        Param memory param = permissionParams[_paramsHash][_paramId];\n\n        if (param.id == LOGIC_OP_PARAM_ID) {\n            return _evalLogic(param, _paramsHash, _who, _where, _what, _how);\n        }\n\n        uint256 value;\n        uint256 comparedTo = uint256(param.value);\n\n        // get value\n        if (param.id == ORACLE_PARAM_ID) {\n            value = checkOracle(IACLOracle(param.value), _who, _where, _what, _how) ? 1 : 0;\n            comparedTo = 1;\n        } else if (param.id == BLOCK_NUMBER_PARAM_ID) {\n            value = getBlockNumber();\n        } else if (param.id == TIMESTAMP_PARAM_ID) {\n            value = getTimestamp();\n        } else if (param.id == PARAM_VALUE_PARAM_ID) {\n            value = uint256(param.value);\n        } else {\n            if (param.id >= _how.length) {\n                return false;\n            }\n            value = uint256(uint240(_how[param.id])); // force lost precision\n        }\n\n        if (Op(param.op) == Op.RET) {\n            return uint256(value) > 0;\n        }\n\n        return compare(value, Op(param.op), comparedTo);\n    }\n\n    function _evalLogic(Param _param, bytes32 _paramsHash, address _who, address _where, bytes32 _what, uint256[] _how)\n        internal\n        view\n        returns (bool)\n    {\n        if (Op(_param.op) == Op.IF_ELSE) {\n            uint32 conditionParam;\n            uint32 successParam;\n            uint32 failureParam;\n\n            (conditionParam, successParam, failureParam) = decodeParamsList(uint256(_param.value));\n            bool result = _evalParam(_paramsHash, conditionParam, _who, _where, _what, _how);\n\n            return _evalParam(_paramsHash, result ? successParam : failureParam, _who, _where, _what, _how);\n        }\n\n        uint32 param1;\n        uint32 param2;\n\n        (param1, param2,) = decodeParamsList(uint256(_param.value));\n        bool r1 = _evalParam(_paramsHash, param1, _who, _where, _what, _how);\n\n        if (Op(_param.op) == Op.NOT) {\n            return !r1;\n        }\n\n        if (r1 && Op(_param.op) == Op.OR) {\n            return true;\n        }\n\n        if (!r1 && Op(_param.op) == Op.AND) {\n            return false;\n        }\n\n        bool r2 = _evalParam(_paramsHash, param2, _who, _where, _what, _how);\n\n        if (Op(_param.op) == Op.XOR) {\n            return r1 != r2;\n        }\n\n        return r2; // both or and and depend on result of r2 after checks\n    }\n\n    function compare(uint256 _a, Op _op, uint256 _b) internal pure returns (bool) {\n        if (_op == Op.EQ)  return _a == _b;                              // solium-disable-line lbrace\n        if (_op == Op.NEQ) return _a != _b;                              // solium-disable-line lbrace\n        if (_op == Op.GT)  return _a > _b;                               // solium-disable-line lbrace\n        if (_op == Op.LT)  return _a < _b;                               // solium-disable-line lbrace\n        if (_op == Op.GTE) return _a >= _b;                              // solium-disable-line lbrace\n        if (_op == Op.LTE) return _a <= _b;                              // solium-disable-line lbrace\n        return false;\n    }\n\n    function checkOracle(IACLOracle _oracleAddr, address _who, address _where, bytes32 _what, uint256[] _how) internal view returns (bool) {\n        bytes4 sig = _oracleAddr.canPerform.selector;\n\n        // a raw call is required so we can return false if the call reverts, rather than reverting\n        bytes memory checkCalldata = abi.encodeWithSelector(sig, _who, _where, _what, _how);\n\n        bool ok;\n        assembly {\n            // send all available gas; if the oracle eats up all the gas, we will eventually revert\n            // note that we are currently guaranteed to still have some gas after the call from\n            // EIP-150's 63/64 gas forward rule\n            ok := staticcall(gas, _oracleAddr, add(checkCalldata, 0x20), mload(checkCalldata), 0, 0)\n        }\n\n        if (!ok) {\n            return false;\n        }\n\n        uint256 size;\n        assembly { size := returndatasize }\n        if (size != 32) {\n            return false;\n        }\n\n        bool result;\n        assembly {\n            let ptr := mload(0x40)       // get next free memory ptr\n            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\n            result := mload(ptr)         // read data at ptr and set it to result\n            mstore(ptr, 0)               // set pointer memory to 0 so it still is the next free ptr\n        }\n\n        return result;\n    }\n\n    /**\n    * @dev Internal function that sets management\n    */\n    function _setPermissionManager(address _newManager, address _app, bytes32 _role) internal {\n        permissionManager[roleHash(_app, _role)] = _newManager;\n        emit ChangePermissionManager(_app, _role, _newManager);\n    }\n\n    function roleHash(address _where, bytes32 _what) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"ROLE\", _where, _what));\n    }\n\n    function permissionHash(address _who, address _where, bytes32 _what) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"PERMISSION\", _who, _where, _what));\n    }\n}\n"
    },
    "@aragon/os/contracts/acl/IACLOracle.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IACLOracle {\n    function canPerform(address who, address where, bytes32 what, uint256[] how) external view returns (bool);\n}\n"
    },
    "@aragon/os/contracts/kernel/Kernel.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./IKernel.sol\";\nimport \"./KernelConstants.sol\";\nimport \"./KernelStorage.sol\";\nimport \"../acl/IACL.sol\";\nimport \"../acl/ACLSyntaxSugar.sol\";\nimport \"../common/ConversionHelpers.sol\";\nimport \"../common/IsContract.sol\";\nimport \"../common/Petrifiable.sol\";\nimport \"../common/VaultRecoverable.sol\";\nimport \"../factory/AppProxyFactory.sol\";\nimport \"../lib/misc/ERCProxy.sol\";\n\n\n// solium-disable-next-line max-len\ncontract Kernel is IKernel, KernelStorage, KernelAppIds, KernelNamespaceConstants, Petrifiable, IsContract, VaultRecoverable, AppProxyFactory, ACLSyntaxSugar {\n    /* Hardcoded constants to save gas\n    bytes32 public constant APP_MANAGER_ROLE = keccak256(\"APP_MANAGER_ROLE\");\n    */\n    bytes32 public constant APP_MANAGER_ROLE = 0xb6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0;\n\n    string private constant ERROR_APP_NOT_CONTRACT = \"KERNEL_APP_NOT_CONTRACT\";\n    string private constant ERROR_INVALID_APP_CHANGE = \"KERNEL_INVALID_APP_CHANGE\";\n    string private constant ERROR_AUTH_FAILED = \"KERNEL_AUTH_FAILED\";\n\n    /**\n    * @dev Constructor that allows the deployer to choose if the base instance should be petrified immediately.\n    * @param _shouldPetrify Immediately petrify this instance so that it can never be initialized\n    */\n    constructor(bool _shouldPetrify) public {\n        if (_shouldPetrify) {\n            petrify();\n        }\n    }\n\n    /**\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\n    * @notice Initialize this kernel instance along with its ACL and set `_permissionsCreator` as the entity that can create other permissions\n    * @param _baseAcl Address of base ACL app\n    * @param _permissionsCreator Entity that will be given permission over createPermission\n    */\n    function initialize(IACL _baseAcl, address _permissionsCreator) public onlyInit {\n        initialized();\n\n        // Set ACL base\n        _setApp(KERNEL_APP_BASES_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, _baseAcl);\n\n        // Create ACL instance and attach it as the default ACL app\n        IACL acl = IACL(newAppProxy(this, KERNEL_DEFAULT_ACL_APP_ID));\n        acl.initialize(_permissionsCreator);\n        _setApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, acl);\n\n        recoveryVaultAppId = KERNEL_DEFAULT_VAULT_APP_ID;\n    }\n\n    /**\n    * @dev Create a new instance of an app linked to this kernel\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`\n    * @param _appId Identifier for app\n    * @param _appBase Address of the app's base implementation\n    * @return AppProxy instance\n    */\n    function newAppInstance(bytes32 _appId, address _appBase)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n        returns (ERCProxy appProxy)\n    {\n        return newAppInstance(_appId, _appBase, new bytes(0), false);\n    }\n\n    /**\n    * @dev Create a new instance of an app linked to this kernel and set its base\n    *      implementation if it was not already set\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\n    * @param _appId Identifier for app\n    * @param _appBase Address of the app's base implementation\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\n    * @param _setDefault Whether the app proxy app is the default one.\n    *        Useful when the Kernel needs to know of an instance of a particular app,\n    *        like Vault for escape hatch mechanism.\n    * @return AppProxy instance\n    */\n    function newAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n        returns (ERCProxy appProxy)\n    {\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\n        appProxy = newAppProxy(this, _appId, _initializePayload);\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\n        // and it will only succeed if sender has permissions to set something to the namespace.\n        if (_setDefault) {\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\n        }\n    }\n\n    /**\n    * @dev Create a new pinned instance of an app linked to this kernel\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`.\n    * @param _appId Identifier for app\n    * @param _appBase Address of the app's base implementation\n    * @return AppProxy instance\n    */\n    function newPinnedAppInstance(bytes32 _appId, address _appBase)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n        returns (ERCProxy appProxy)\n    {\n        return newPinnedAppInstance(_appId, _appBase, new bytes(0), false);\n    }\n\n    /**\n    * @dev Create a new pinned instance of an app linked to this kernel and set\n    *      its base implementation if it was not already set\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\n    * @param _appId Identifier for app\n    * @param _appBase Address of the app's base implementation\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\n    * @param _setDefault Whether the app proxy app is the default one.\n    *        Useful when the Kernel needs to know of an instance of a particular app,\n    *        like Vault for escape hatch mechanism.\n    * @return AppProxy instance\n    */\n    function newPinnedAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n        returns (ERCProxy appProxy)\n    {\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\n        appProxy = newAppProxyPinned(this, _appId, _initializePayload);\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\n        // and it will only succeed if sender has permissions to set something to the namespace.\n        if (_setDefault) {\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\n        }\n    }\n\n    /**\n    * @dev Set the resolving address of an app instance or base implementation\n    * @notice Set the resolving address of `_appId` in namespace `_namespace` to `_app`\n    * @param _namespace App namespace to use\n    * @param _appId Identifier for app\n    * @param _app Address of the app instance or base implementation\n    * @return ID of app\n    */\n    function setApp(bytes32 _namespace, bytes32 _appId, address _app)\n        public\n        auth(APP_MANAGER_ROLE, arr(_namespace, _appId))\n    {\n        _setApp(_namespace, _appId, _app);\n    }\n\n    /**\n    * @dev Set the default vault id for the escape hatch mechanism\n    * @param _recoveryVaultAppId Identifier of the recovery vault app\n    */\n    function setRecoveryVaultAppId(bytes32 _recoveryVaultAppId)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_ADDR_NAMESPACE, _recoveryVaultAppId))\n    {\n        recoveryVaultAppId = _recoveryVaultAppId;\n    }\n\n    // External access to default app id and namespace constants to mimic default getters for constants\n    /* solium-disable function-order, mixedcase */\n    function CORE_NAMESPACE() external pure returns (bytes32) { return KERNEL_CORE_NAMESPACE; }\n    function APP_BASES_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_BASES_NAMESPACE; }\n    function APP_ADDR_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_ADDR_NAMESPACE; }\n    function KERNEL_APP_ID() external pure returns (bytes32) { return KERNEL_CORE_APP_ID; }\n    function DEFAULT_ACL_APP_ID() external pure returns (bytes32) { return KERNEL_DEFAULT_ACL_APP_ID; }\n    /* solium-enable function-order, mixedcase */\n\n    /**\n    * @dev Get the address of an app instance or base implementation\n    * @param _namespace App namespace to use\n    * @param _appId Identifier for app\n    * @return Address of the app\n    */\n    function getApp(bytes32 _namespace, bytes32 _appId) public view returns (address) {\n        return apps[_namespace][_appId];\n    }\n\n    /**\n    * @dev Get the address of the recovery Vault instance (to recover funds)\n    * @return Address of the Vault\n    */\n    function getRecoveryVault() public view returns (address) {\n        return apps[KERNEL_APP_ADDR_NAMESPACE][recoveryVaultAppId];\n    }\n\n    /**\n    * @dev Get the installed ACL app\n    * @return ACL app\n    */\n    function acl() public view returns (IACL) {\n        return IACL(getApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID));\n    }\n\n    /**\n    * @dev Function called by apps to check ACL on kernel or to check permission status\n    * @param _who Sender of the original call\n    * @param _where Address of the app\n    * @param _what Identifier for a group of actions in app\n    * @param _how Extra data for ACL auth\n    * @return Boolean indicating whether the ACL allows the role or not.\n    *         Always returns false if the kernel hasn't been initialized yet.\n    */\n    function hasPermission(address _who, address _where, bytes32 _what, bytes _how) public view returns (bool) {\n        IACL defaultAcl = acl();\n        return address(defaultAcl) != address(0) && // Poor man's initialization check (saves gas)\n            defaultAcl.hasPermission(_who, _where, _what, _how);\n    }\n\n    function _setApp(bytes32 _namespace, bytes32 _appId, address _app) internal {\n        require(isContract(_app), ERROR_APP_NOT_CONTRACT);\n        apps[_namespace][_appId] = _app;\n        emit SetApp(_namespace, _appId, _app);\n    }\n\n    function _setAppIfNew(bytes32 _namespace, bytes32 _appId, address _app) internal {\n        address app = getApp(_namespace, _appId);\n        if (app != address(0)) {\n            // The only way to set an app is if it passes the isContract check, so no need to check it again\n            require(app == _app, ERROR_INVALID_APP_CHANGE);\n        } else {\n            _setApp(_namespace, _appId, _app);\n        }\n    }\n\n    modifier auth(bytes32 _role, uint256[] memory _params) {\n        require(\n            hasPermission(msg.sender, address(this), _role, ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)),\n            ERROR_AUTH_FAILED\n        );\n        _;\n    }\n}\n"
    },
    "@aragon/os/contracts/kernel/KernelStorage.sol": {
      "content": "pragma solidity 0.4.24;\n\n\ncontract KernelStorage {\n    // namespace => app id => address\n    mapping (bytes32 => mapping (bytes32 => address)) public apps;\n    bytes32 public recoveryVaultAppId;\n}\n"
    },
    "@aragon/os/contracts/factory/AppProxyFactory.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../apps/AppProxyUpgradeable.sol\";\nimport \"../apps/AppProxyPinned.sol\";\n\n\ncontract AppProxyFactory {\n    event NewAppProxy(address proxy, bool isUpgradeable, bytes32 appId);\n\n    /**\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId`\n    * @param _kernel App's Kernel reference\n    * @param _appId Identifier for app\n    * @return AppProxyUpgradeable\n    */\n    function newAppProxy(IKernel _kernel, bytes32 _appId) public returns (AppProxyUpgradeable) {\n        return newAppProxy(_kernel, _appId, new bytes(0));\n    }\n\n    /**\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\n    * @param _kernel App's Kernel reference\n    * @param _appId Identifier for app\n    * @return AppProxyUpgradeable\n    */\n    function newAppProxy(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyUpgradeable) {\n        AppProxyUpgradeable proxy = new AppProxyUpgradeable(_kernel, _appId, _initializePayload);\n        emit NewAppProxy(address(proxy), true, _appId);\n        return proxy;\n    }\n\n    /**\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId`\n    * @param _kernel App's Kernel reference\n    * @param _appId Identifier for app\n    * @return AppProxyPinned\n    */\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId) public returns (AppProxyPinned) {\n        return newAppProxyPinned(_kernel, _appId, new bytes(0));\n    }\n\n    /**\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\n    * @param _kernel App's Kernel reference\n    * @param _appId Identifier for app\n    * @param _initializePayload Proxy initialization payload\n    * @return AppProxyPinned\n    */\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyPinned) {\n        AppProxyPinned proxy = new AppProxyPinned(_kernel, _appId, _initializePayload);\n        emit NewAppProxy(address(proxy), false, _appId);\n        return proxy;\n    }\n}\n"
    },
    "@aragon/os/contracts/apps/AppProxyUpgradeable.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./AppProxyBase.sol\";\n\n\ncontract AppProxyUpgradeable is AppProxyBase {\n    /**\n    * @dev Initialize AppProxyUpgradeable (makes it an upgradeable Aragon app)\n    * @param _kernel Reference to organization kernel for the app\n    * @param _appId Identifier for app\n    * @param _initializePayload Payload for call to be made after setup to initialize\n    */\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\n        AppProxyBase(_kernel, _appId, _initializePayload)\n        public // solium-disable-line visibility-first\n    {\n        // solium-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @dev ERC897, the address the proxy would delegate calls to\n     */\n    function implementation() public view returns (address) {\n        return getAppBase(appId());\n    }\n\n    /**\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\n     */\n    function proxyType() public pure returns (uint256 proxyTypeId) {\n        return UPGRADEABLE;\n    }\n}\n"
    },
    "@aragon/os/contracts/apps/AppProxyBase.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./AppStorage.sol\";\nimport \"../common/DepositableDelegateProxy.sol\";\nimport \"../kernel/KernelConstants.sol\";\nimport \"../kernel/IKernel.sol\";\n\n\ncontract AppProxyBase is AppStorage, DepositableDelegateProxy, KernelNamespaceConstants {\n    /**\n    * @dev Initialize AppProxy\n    * @param _kernel Reference to organization kernel for the app\n    * @param _appId Identifier for app\n    * @param _initializePayload Payload for call to be made after setup to initialize\n    */\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\n        setKernel(_kernel);\n        setAppId(_appId);\n\n        // Implicit check that kernel is actually a Kernel\n        // The EVM doesn't actually provide a way for us to make sure, but we can force a revert to\n        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\n        // it.\n        address appCode = getAppBase(_appId);\n\n        // If initialize payload is provided, it will be executed\n        if (_initializePayload.length > 0) {\n            require(isContract(appCode));\n            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\n            // returns ending execution context and halts contract deployment\n            require(appCode.delegatecall(_initializePayload));\n        }\n    }\n\n    function getAppBase(bytes32 _appId) internal view returns (address) {\n        return kernel().getApp(KERNEL_APP_BASES_NAMESPACE, _appId);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/DepositableDelegateProxy.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./DelegateProxy.sol\";\nimport \"./DepositableStorage.sol\";\n\n\ncontract DepositableDelegateProxy is DepositableStorage, DelegateProxy {\n    event ProxyDeposit(address sender, uint256 value);\n\n    function () external payable {\n        uint256 forwardGasThreshold = FWD_GAS_LIMIT;\n        bytes32 isDepositablePosition = DEPOSITABLE_POSITION;\n\n        // Optimized assembly implementation to prevent EIP-1884 from breaking deposits, reference code in Solidity:\n        // https://github.com/aragon/aragonOS/blob/v4.2.1/contracts/common/DepositableDelegateProxy.sol#L10-L20\n        assembly {\n            // Continue only if the gas left is lower than the threshold for forwarding to the implementation code,\n            // otherwise continue outside of the assembly block.\n            if lt(gas, forwardGasThreshold) {\n                // Only accept the deposit and emit an event if all of the following are true:\n                // the proxy accepts deposits (isDepositable), msg.data.length == 0, and msg.value > 0\n                if and(and(sload(isDepositablePosition), iszero(calldatasize)), gt(callvalue, 0)) {\n                    // Equivalent Solidity code for emitting the event:\n                    // emit ProxyDeposit(msg.sender, msg.value);\n\n                    let logData := mload(0x40) // free memory pointer\n                    mstore(logData, caller) // add 'msg.sender' to the log data (first event param)\n                    mstore(add(logData, 0x20), callvalue) // add 'msg.value' to the log data (second event param)\n\n                    // Emit an event with one topic to identify the event: keccak256('ProxyDeposit(address,uint256)') = 0x15ee...dee1\n                    log1(logData, 0x40, 0x15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee1)\n\n                    stop() // Stop. Exits execution context\n                }\n\n                // If any of above checks failed, revert the execution (if ETH was sent, it is returned to the sender)\n                revert(0, 0)\n            }\n        }\n\n        address target = implementation();\n        delegatedFwd(target, msg.data);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/DelegateProxy.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../common/IsContract.sol\";\nimport \"../lib/misc/ERCProxy.sol\";\n\n\ncontract DelegateProxy is ERCProxy, IsContract {\n    uint256 internal constant FWD_GAS_LIMIT = 10000;\n\n    /**\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\n    * @param _dst Destination address to perform the delegatecall\n    * @param _calldata Calldata for the delegatecall\n    */\n    function delegatedFwd(address _dst, bytes _calldata) internal {\n        require(isContract(_dst));\n        uint256 fwdGasLimit = FWD_GAS_LIMIT;\n\n        assembly {\n            let result := delegatecall(sub(gas, fwdGasLimit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\n            let size := returndatasize\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, size)\n\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n            // if the call returned error data, forward it\n            switch result case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n}\n"
    },
    "@aragon/os/contracts/lib/misc/ERCProxy.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract ERCProxy {\n    uint256 internal constant FORWARDING = 1;\n    uint256 internal constant UPGRADEABLE = 2;\n\n    function proxyType() public pure returns (uint256 proxyTypeId);\n    function implementation() public view returns (address codeAddr);\n}\n"
    },
    "@aragon/os/contracts/common/DepositableStorage.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./UnstructuredStorage.sol\";\n\n\ncontract DepositableStorage {\n    using UnstructuredStorage for bytes32;\n\n    // keccak256(\"aragonOS.depositableStorage.depositable\")\n    bytes32 internal constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;\n\n    function isDepositable() public view returns (bool) {\n        return DEPOSITABLE_POSITION.getStorageBool();\n    }\n\n    function setDepositable(bool _depositable) internal {\n        DEPOSITABLE_POSITION.setStorageBool(_depositable);\n    }\n}\n"
    },
    "@aragon/os/contracts/apps/AppProxyPinned.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../common/UnstructuredStorage.sol\";\nimport \"../common/IsContract.sol\";\nimport \"./AppProxyBase.sol\";\n\n\ncontract AppProxyPinned is IsContract, AppProxyBase {\n    using UnstructuredStorage for bytes32;\n\n    // keccak256(\"aragonOS.appStorage.pinnedCode\")\n    bytes32 internal constant PINNED_CODE_POSITION = 0xdee64df20d65e53d7f51cb6ab6d921a0a6a638a91e942e1d8d02df28e31c038e;\n\n    /**\n    * @dev Initialize AppProxyPinned (makes it an un-upgradeable Aragon app)\n    * @param _kernel Reference to organization kernel for the app\n    * @param _appId Identifier for app\n    * @param _initializePayload Payload for call to be made after setup to initialize\n    */\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\n        AppProxyBase(_kernel, _appId, _initializePayload)\n        public // solium-disable-line visibility-first\n    {\n        setPinnedCode(getAppBase(_appId));\n        require(isContract(pinnedCode()));\n    }\n\n    /**\n     * @dev ERC897, the address the proxy would delegate calls to\n     */\n    function implementation() public view returns (address) {\n        return pinnedCode();\n    }\n\n    /**\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\n     */\n    function proxyType() public pure returns (uint256 proxyTypeId) {\n        return FORWARDING;\n    }\n\n    function setPinnedCode(address _pinnedCode) internal {\n        PINNED_CODE_POSITION.setStorageAddress(_pinnedCode);\n    }\n\n    function pinnedCode() internal view returns (address) {\n        return PINNED_CODE_POSITION.getStorageAddress();\n    }\n}\n"
    },
    "@aragon/os/contracts/factory/DAOFactory.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../kernel/IKernel.sol\";\nimport \"../kernel/Kernel.sol\";\nimport \"../kernel/KernelProxy.sol\";\n\nimport \"../acl/IACL.sol\";\nimport \"../acl/ACL.sol\";\n\nimport \"./EVMScriptRegistryFactory.sol\";\n\n\ncontract DAOFactory {\n    IKernel public baseKernel;\n    IACL public baseACL;\n    EVMScriptRegistryFactory public regFactory;\n\n    event DeployDAO(address dao);\n    event DeployEVMScriptRegistry(address reg);\n\n    /**\n    * @notice Create a new DAOFactory, creating DAOs with Kernels proxied to `_baseKernel`, ACLs proxied to `_baseACL`, and new EVMScriptRegistries created from `_regFactory`.\n    * @param _baseKernel Base Kernel\n    * @param _baseACL Base ACL\n    * @param _regFactory EVMScriptRegistry factory\n    */\n    constructor(IKernel _baseKernel, IACL _baseACL, EVMScriptRegistryFactory _regFactory) public {\n        // No need to init as it cannot be killed by devops199\n        if (address(_regFactory) != address(0)) {\n            regFactory = _regFactory;\n        }\n\n        baseKernel = _baseKernel;\n        baseACL = _baseACL;\n    }\n\n    /**\n    * @notice Create a new DAO with `_root` set as the initial admin\n    * @param _root Address that will be granted control to setup DAO permissions\n    * @return Newly created DAO\n    */\n    function newDAO(address _root) public returns (Kernel) {\n        Kernel dao = Kernel(new KernelProxy(baseKernel));\n\n        if (address(regFactory) == address(0)) {\n            dao.initialize(baseACL, _root);\n        } else {\n            dao.initialize(baseACL, this);\n\n            ACL acl = ACL(dao.acl());\n            bytes32 permRole = acl.CREATE_PERMISSIONS_ROLE();\n            bytes32 appManagerRole = dao.APP_MANAGER_ROLE();\n\n            acl.grantPermission(regFactory, acl, permRole);\n\n            acl.createPermission(regFactory, dao, appManagerRole, this);\n\n            EVMScriptRegistry reg = regFactory.newEVMScriptRegistry(dao);\n            emit DeployEVMScriptRegistry(address(reg));\n\n            // Clean up permissions\n            // First, completely reset the APP_MANAGER_ROLE\n            acl.revokePermission(regFactory, dao, appManagerRole);\n            acl.removePermissionManager(dao, appManagerRole);\n\n            // Then, make root the only holder and manager of CREATE_PERMISSIONS_ROLE\n            acl.revokePermission(regFactory, acl, permRole);\n            acl.revokePermission(this, acl, permRole);\n            acl.grantPermission(_root, acl, permRole);\n            acl.setPermissionManager(_root, acl, permRole);\n        }\n\n        emit DeployDAO(address(dao));\n\n        return dao;\n    }\n}\n"
    },
    "@aragon/os/contracts/kernel/KernelProxy.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./IKernel.sol\";\nimport \"./KernelConstants.sol\";\nimport \"./KernelStorage.sol\";\nimport \"../common/DepositableDelegateProxy.sol\";\nimport \"../common/IsContract.sol\";\n\n\ncontract KernelProxy is IKernelEvents, KernelStorage, KernelAppIds, KernelNamespaceConstants, IsContract, DepositableDelegateProxy {\n    /**\n    * @dev KernelProxy is a proxy contract to a kernel implementation. The implementation\n    *      can update the reference, which effectively upgrades the contract\n    * @param _kernelImpl Address of the contract used as implementation for kernel\n    */\n    constructor(IKernel _kernelImpl) public {\n        require(isContract(address(_kernelImpl)));\n        apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID] = _kernelImpl;\n\n        // Note that emitting this event is important for verifying that a KernelProxy instance\n        // was never upgraded to a malicious Kernel logic contract over its lifespan.\n        // This starts the \"chain of trust\", that can be followed through later SetApp() events\n        // emitted during kernel upgrades.\n        emit SetApp(KERNEL_CORE_NAMESPACE, KERNEL_CORE_APP_ID, _kernelImpl);\n    }\n\n    /**\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\n     */\n    function proxyType() public pure returns (uint256 proxyTypeId) {\n        return UPGRADEABLE;\n    }\n\n    /**\n    * @dev ERC897, the address the proxy would delegate calls to\n    */\n    function implementation() public view returns (address) {\n        return apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID];\n    }\n}\n"
    },
    "@aragon/os/contracts/factory/EVMScriptRegistryFactory.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../evmscript/IEVMScriptExecutor.sol\";\nimport \"../evmscript/EVMScriptRegistry.sol\";\n\nimport \"../evmscript/executors/CallsScript.sol\";\n\nimport \"../kernel/Kernel.sol\";\nimport \"../acl/ACL.sol\";\n\n\ncontract EVMScriptRegistryFactory is EVMScriptRegistryConstants {\n    EVMScriptRegistry public baseReg;\n    IEVMScriptExecutor public baseCallScript;\n\n    /**\n    * @notice Create a new EVMScriptRegistryFactory.\n    */\n    constructor() public {\n        baseReg = new EVMScriptRegistry();\n        baseCallScript = IEVMScriptExecutor(new CallsScript());\n    }\n\n    /**\n    * @notice Install a new pinned instance of EVMScriptRegistry on `_dao`.\n    * @param _dao Kernel\n    * @return Installed EVMScriptRegistry\n    */\n    function newEVMScriptRegistry(Kernel _dao) public returns (EVMScriptRegistry reg) {\n        bytes memory initPayload = abi.encodeWithSelector(reg.initialize.selector);\n        reg = EVMScriptRegistry(_dao.newPinnedAppInstance(EVMSCRIPT_REGISTRY_APP_ID, baseReg, initPayload, true));\n\n        ACL acl = ACL(_dao.acl());\n\n        acl.createPermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE(), this);\n\n        reg.addScriptExecutor(baseCallScript);     // spec 1 = CallsScript\n\n        // Clean up the permissions\n        acl.revokePermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\n        acl.removePermissionManager(reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\n\n        return reg;\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/EVMScriptRegistry.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../apps/AragonApp.sol\";\nimport \"./ScriptHelpers.sol\";\nimport \"./IEVMScriptExecutor.sol\";\nimport \"./IEVMScriptRegistry.sol\";\n\n\n/* solium-disable function-order */\n// Allow public initialize() to be first\ncontract EVMScriptRegistry is IEVMScriptRegistry, EVMScriptRegistryConstants, AragonApp {\n    using ScriptHelpers for bytes;\n\n    /* Hardcoded constants to save gas\n    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = keccak256(\"REGISTRY_ADD_EXECUTOR_ROLE\");\n    bytes32 public constant REGISTRY_MANAGER_ROLE = keccak256(\"REGISTRY_MANAGER_ROLE\");\n    */\n    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = 0xc4e90f38eea8c4212a009ca7b8947943ba4d4a58d19b683417f65291d1cd9ed2;\n    // WARN: Manager can censor all votes and the like happening in an org\n    bytes32 public constant REGISTRY_MANAGER_ROLE = 0xf7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa3;\n\n    uint256 internal constant SCRIPT_START_LOCATION = 4;\n\n    string private constant ERROR_INEXISTENT_EXECUTOR = \"EVMREG_INEXISTENT_EXECUTOR\";\n    string private constant ERROR_EXECUTOR_ENABLED = \"EVMREG_EXECUTOR_ENABLED\";\n    string private constant ERROR_EXECUTOR_DISABLED = \"EVMREG_EXECUTOR_DISABLED\";\n    string private constant ERROR_SCRIPT_LENGTH_TOO_SHORT = \"EVMREG_SCRIPT_LENGTH_TOO_SHORT\";\n\n    struct ExecutorEntry {\n        IEVMScriptExecutor executor;\n        bool enabled;\n    }\n\n    uint256 private executorsNextIndex;\n    mapping (uint256 => ExecutorEntry) public executors;\n\n    event EnableExecutor(uint256 indexed executorId, address indexed executorAddress);\n    event DisableExecutor(uint256 indexed executorId, address indexed executorAddress);\n\n    modifier executorExists(uint256 _executorId) {\n        require(_executorId > 0 && _executorId < executorsNextIndex, ERROR_INEXISTENT_EXECUTOR);\n        _;\n    }\n\n    /**\n    * @notice Initialize the registry\n    */\n    function initialize() public onlyInit {\n        initialized();\n        // Create empty record to begin executor IDs at 1\n        executorsNextIndex = 1;\n    }\n\n    /**\n    * @notice Add a new script executor with address `_executor` to the registry\n    * @param _executor Address of the IEVMScriptExecutor that will be added to the registry\n    * @return id Identifier of the executor in the registry\n    */\n    function addScriptExecutor(IEVMScriptExecutor _executor) external auth(REGISTRY_ADD_EXECUTOR_ROLE) returns (uint256 id) {\n        uint256 executorId = executorsNextIndex++;\n        executors[executorId] = ExecutorEntry(_executor, true);\n        emit EnableExecutor(executorId, _executor);\n        return executorId;\n    }\n\n    /**\n    * @notice Disable script executor with ID `_executorId`\n    * @param _executorId Identifier of the executor in the registry\n    */\n    function disableScriptExecutor(uint256 _executorId)\n        external\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\n    {\n        // Note that we don't need to check for an executor's existence in this case, as only\n        // existing executors can be enabled\n        ExecutorEntry storage executorEntry = executors[_executorId];\n        require(executorEntry.enabled, ERROR_EXECUTOR_DISABLED);\n        executorEntry.enabled = false;\n        emit DisableExecutor(_executorId, executorEntry.executor);\n    }\n\n    /**\n    * @notice Enable script executor with ID `_executorId`\n    * @param _executorId Identifier of the executor in the registry\n    */\n    function enableScriptExecutor(uint256 _executorId)\n        external\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\n        executorExists(_executorId)\n    {\n        ExecutorEntry storage executorEntry = executors[_executorId];\n        require(!executorEntry.enabled, ERROR_EXECUTOR_ENABLED);\n        executorEntry.enabled = true;\n        emit EnableExecutor(_executorId, executorEntry.executor);\n    }\n\n    /**\n    * @dev Get the script executor that can execute a particular script based on its first 4 bytes\n    * @param _script EVMScript being inspected\n    */\n    function getScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n        require(_script.length >= SCRIPT_START_LOCATION, ERROR_SCRIPT_LENGTH_TOO_SHORT);\n        uint256 id = _script.getSpecId();\n\n        // Note that we don't need to check for an executor's existence in this case, as only\n        // existing executors can be enabled\n        ExecutorEntry storage entry = executors[id];\n        return entry.enabled ? entry.executor : IEVMScriptExecutor(0);\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/ScriptHelpers.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\nlibrary ScriptHelpers {\n    function getSpecId(bytes _script) internal pure returns (uint32) {\n        return uint32At(_script, 0);\n    }\n\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\n        assembly {\n            result := mload(add(_data, add(0x20, _location)))\n        }\n    }\n\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\n        uint256 word = uint256At(_data, _location);\n\n        assembly {\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\n            0x1000000000000000000000000)\n        }\n    }\n\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\n        uint256 word = uint256At(_data, _location);\n\n        assembly {\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\n            0x100000000000000000000000000000000000000000000000000000000)\n        }\n    }\n\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\n        assembly {\n            result := add(_data, add(0x20, _location))\n        }\n    }\n\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\n        bytes memory payload = new bytes(4);\n        assembly { mstore(add(payload, 0x20), _sig) }\n        return payload;\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/executors/CallsScript.sol": {
      "content": "pragma solidity 0.4.24;\n\n// Inspired by https://github.com/reverendus/tx-manager\n\nimport \"../ScriptHelpers.sol\";\nimport \"./BaseEVMScriptExecutor.sol\";\n\n\ncontract CallsScript is BaseEVMScriptExecutor {\n    using ScriptHelpers for bytes;\n\n    /* Hardcoded constants to save gas\n    bytes32 internal constant EXECUTOR_TYPE = keccak256(\"CALLS_SCRIPT\");\n    */\n    bytes32 internal constant EXECUTOR_TYPE = 0x2dc858a00f3e417be1394b87c07158e989ec681ce8cc68a9093680ac1a870302;\n\n    string private constant ERROR_BLACKLISTED_CALL = \"EVMCALLS_BLACKLISTED_CALL\";\n    string private constant ERROR_INVALID_LENGTH = \"EVMCALLS_INVALID_LENGTH\";\n\n    /* This is manually crafted in assembly\n    string private constant ERROR_CALL_REVERTED = \"EVMCALLS_CALL_REVERTED\";\n    */\n\n    event LogScriptCall(address indexed sender, address indexed src, address indexed dst);\n\n    /**\n    * @notice Executes a number of call scripts\n    * @param _script [ specId (uint32) ] many calls with this structure ->\n    *    [ to (address: 20 bytes) ] [ calldataLength (uint32: 4 bytes) ] [ calldata (calldataLength bytes) ]\n    * @param _blacklist Addresses the script cannot call to, or will revert.\n    * @return Always returns empty byte array\n    */\n    function execScript(bytes _script, bytes, address[] _blacklist) external isInitialized returns (bytes) {\n        uint256 location = SCRIPT_START_LOCATION; // first 32 bits are spec id\n        while (location < _script.length) {\n            // Check there's at least address + calldataLength available\n            require(_script.length - location >= 0x18, ERROR_INVALID_LENGTH);\n\n            address contractAddress = _script.addressAt(location);\n            // Check address being called is not blacklist\n            for (uint256 i = 0; i < _blacklist.length; i++) {\n                require(contractAddress != _blacklist[i], ERROR_BLACKLISTED_CALL);\n            }\n\n            // logged before execution to ensure event ordering in receipt\n            // if failed entire execution is reverted regardless\n            emit LogScriptCall(msg.sender, address(this), contractAddress);\n\n            uint256 calldataLength = uint256(_script.uint32At(location + 0x14));\n            uint256 startOffset = location + 0x14 + 0x04;\n            uint256 calldataStart = _script.locationOf(startOffset);\n\n            // compute end of script / next location\n            location = startOffset + calldataLength;\n            require(location <= _script.length, ERROR_INVALID_LENGTH);\n\n            bool success;\n            assembly {\n                success := call(\n                    sub(gas, 5000),       // forward gas left - 5000\n                    contractAddress,      // address\n                    0,                    // no value\n                    calldataStart,        // calldata start\n                    calldataLength,       // calldata length\n                    0,                    // don't write output\n                    0                     // don't write output\n                )\n\n                switch success\n                case 0 {\n                    let ptr := mload(0x40)\n\n                    switch returndatasize\n                    case 0 {\n                        // No error data was returned, revert with \"EVMCALLS_CALL_REVERTED\"\n                        // See remix: doing a `revert(\"EVMCALLS_CALL_REVERTED\")` always results in\n                        // this memory layout\n                        mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\n                        mstore(add(ptr, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\n                        mstore(add(ptr, 0x24), 0x0000000000000000000000000000000000000000000000000000000000000016) // reason length\n                        mstore(add(ptr, 0x44), 0x45564d43414c4c535f43414c4c5f524556455254454400000000000000000000) // reason\n\n                        revert(ptr, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\n                    }\n                    default {\n                        // Forward the full error data\n                        returndatacopy(ptr, 0, returndatasize)\n                        revert(ptr, returndatasize)\n                    }\n                }\n                default { }\n            }\n        }\n        // No need to allocate empty bytes for the return as this can only be called via an delegatecall\n        // (due to the isInitialized modifier)\n    }\n\n    function executorType() external pure returns (bytes32) {\n        return EXECUTOR_TYPE;\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/executors/BaseEVMScriptExecutor.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../../common/Autopetrified.sol\";\nimport \"../IEVMScriptExecutor.sol\";\n\n\ncontract BaseEVMScriptExecutor is IEVMScriptExecutor, Autopetrified {\n    uint256 internal constant SCRIPT_START_LOCATION = 4;\n}\n"
    },
    "@aragon/contract-helpers-test/contracts/0.4/misc/ExecutionTarget.sol": {
      "content": "pragma solidity ^0.4.24;\n\n\ncontract ExecutionTarget {\n    uint256 public counter;\n\n    event TargetExecuted(uint256 counter);\n\n    function execute() external {\n        counter += 1;\n        emit TargetExecuted(counter);\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": false
    },
    "optimizer": {
      "enabled": false,
      "runs": 10000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}