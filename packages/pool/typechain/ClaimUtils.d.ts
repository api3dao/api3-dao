/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ClaimUtilsInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "balanceOfAt(uint256,address)": FunctionFragment;
    "claimsManager()": FunctionFragment;
    "currentApr()": FunctionFragment;
    "delegateShares(address)": FunctionFragment;
    "delegatedTo(address)": FunctionFragment;
    "delegatedToAt(uint256,address)": FunctionFragment;
    "deposit(address,uint256,address)": FunctionFragment;
    "depositAndStake(address,uint256,address)": FunctionFragment;
    "genesisEpoch()": FunctionFragment;
    "getUserLocked(address)": FunctionFragment;
    "getUserLockedAt(address,uint256)": FunctionFragment;
    "lastEpochPaid()": FunctionFragment;
    "maxApr()": FunctionFragment;
    "minApr()": FunctionFragment;
    "payOutClaim(uint256,uint256)": FunctionFragment;
    "payReward(uint256)": FunctionFragment;
    "rewardEpochLength()": FunctionFragment;
    "rewardVestingPeriod()": FunctionFragment;
    "rewards(uint256)": FunctionFragment;
    "scheduleUnstake(uint256)": FunctionFragment;
    "shares(address)": FunctionFragment;
    "sharesAt(uint256,address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeTarget()": FunctionFragment;
    "totalShares(uint256)": FunctionFragment;
    "totalStake()": FunctionFragment;
    "totalStakeAt(uint256)": FunctionFragment;
    "totalStaked(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
    "undelegateShares()": FunctionFragment;
    "unstake()": FunctionFragment;
    "unstakeAndWithdraw(address)": FunctionFragment;
    "unstakeWaitPeriod()": FunctionFragment;
    "updateCoeff()": FunctionFragment;
    "updateUserLocked(address,uint256)": FunctionFragment;
    "userDelegating(address)": FunctionFragment;
    "userDelegatingAt(address,uint256)": FunctionFragment;
    "userStaked(address)": FunctionFragment;
    "users(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimsManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentApr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegateShares",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "delegatedTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegatedToAt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndStake",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "genesisEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLocked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLockedAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastEpochPaid",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxApr", values?: undefined): string;
  encodeFunctionData(functionFragment: "minApr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payOutClaim",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardEpochLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardVestingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleUnstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "shares", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sharesAt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakeAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegateShares",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unstake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstakeAndWithdraw",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeWaitPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCoeff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserLocked",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userDelegating",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userDelegatingAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userStaked", values: [string]): string;
  encodeFunctionData(functionFragment: "users", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currentApr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatedTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatedToAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLockedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastEpochPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxApr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minApr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payOutClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardEpochLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardVestingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scheduleUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sharesAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStakeAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegateShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeAndWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeWaitPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCoeff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDelegating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDelegatingAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStaked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ClaimPayout(uint256,uint256)": EventFragment;
    "Delegated(address,address)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "Epoch(uint256,uint256,uint256)": EventFragment;
    "ScheduleUnstake(address,uint256,uint256)": EventFragment;
    "Stake(address,uint256)": EventFragment;
    "Undelegated(address,address)": EventFragment;
    "Unstake(address,uint256)": EventFragment;
    "UserUpdate(address,uint256,uint256)": EventFragment;
    "Withdrawal(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimPayout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Delegated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Epoch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScheduleUnstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Undelegated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export class ClaimUtils extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ClaimUtilsInterface;

  functions: {
    balanceOf(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfAt(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOfAt(uint256,address)"(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimsManager(overrides?: CallOverrides): Promise<[string]>;

    "claimsManager()"(overrides?: CallOverrides): Promise<[string]>;

    currentApr(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentApr()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    delegateShares(
      delegate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegateShares(address)"(
      delegate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delegatedTo(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "delegatedTo(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delegatedToAt(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "delegatedToAt(uint256,address)"(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deposit(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(address,uint256,address)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositAndStake(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositAndStake(address,uint256,address)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    genesisEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "genesisEpoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserLocked(
      userAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getUserLocked(address)"(
      userAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getUserLockedAt(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getUserLockedAt(address,uint256)"(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastEpochPaid(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastEpochPaid()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxApr(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxApr()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minApr(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minApr()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    payOutClaim(
      amount: BigNumberish,
      atBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "payOutClaim(uint256,uint256)"(
      amount: BigNumberish,
      atBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    payReward(
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "payReward(uint256)"(
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardEpochLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardEpochLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardVestingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardVestingPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; atBlock: BigNumber }
    >;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; atBlock: BigNumber }
    >;

    scheduleUnstake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "scheduleUnstake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shares(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "shares(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sharesAt(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "sharesAt(uint256,address)"(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeTarget(overrides?: CallOverrides): Promise<[BigNumber]>;

    "stakeTarget()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    "totalShares(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    totalStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalStake()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakeAt(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalStakeAt(uint256)"(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalStaked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    "totalStaked(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyAt(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalSupplyAt(uint256)"(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    undelegateShares(overrides?: Overrides): Promise<ContractTransaction>;

    "undelegateShares()"(overrides?: Overrides): Promise<ContractTransaction>;

    unstake(overrides?: Overrides): Promise<ContractTransaction>;

    "unstake()"(overrides?: Overrides): Promise<ContractTransaction>;

    unstakeAndWithdraw(
      destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unstakeAndWithdraw(address)"(
      destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unstakeWaitPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "unstakeWaitPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateCoeff(overrides?: CallOverrides): Promise<[BigNumber]>;

    "updateCoeff()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateUserLocked(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateUserLocked(address,uint256)"(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userDelegating(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "userDelegating(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userDelegatingAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "userDelegatingAt(address,uint256)"(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userStaked(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userStaked(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        unstaked: BigNumber;
        locked: BigNumber;
        vesting: BigNumber;
        unstakeScheduledFor: BigNumber;
        unstakeAmount: BigNumber;
        lastUpdateEpoch: BigNumber;
        oldestLockedEpoch: BigNumber;
      }
    >;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        unstaked: BigNumber;
        locked: BigNumber;
        vesting: BigNumber;
        unstakeScheduledFor: BigNumber;
        unstakeAmount: BigNumber;
        lastUpdateEpoch: BigNumber;
        oldestLockedEpoch: BigNumber;
      }
    >;

    withdraw(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  balanceOf(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfAt(
    fromBlock: BigNumberish,
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfAt(uint256,address)"(
    fromBlock: BigNumberish,
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimsManager(overrides?: CallOverrides): Promise<string>;

  "claimsManager()"(overrides?: CallOverrides): Promise<string>;

  currentApr(overrides?: CallOverrides): Promise<BigNumber>;

  "currentApr()"(overrides?: CallOverrides): Promise<BigNumber>;

  delegateShares(
    delegate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegateShares(address)"(
    delegate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delegatedTo(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "delegatedTo(address)"(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delegatedToAt(
    fromBlock: BigNumberish,
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "delegatedToAt(uint256,address)"(
    fromBlock: BigNumberish,
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    source: string,
    amount: BigNumberish,
    userAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(address,uint256,address)"(
    source: string,
    amount: BigNumberish,
    userAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositAndStake(
    source: string,
    amount: BigNumberish,
    userAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositAndStake(address,uint256,address)"(
    source: string,
    amount: BigNumberish,
    userAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "genesisEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  getUserLocked(
    userAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getUserLocked(address)"(
    userAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getUserLockedAt(
    userAddress: string,
    targetEpoch: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getUserLockedAt(address,uint256)"(
    userAddress: string,
    targetEpoch: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastEpochPaid(overrides?: CallOverrides): Promise<BigNumber>;

  "lastEpochPaid()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxApr(overrides?: CallOverrides): Promise<BigNumber>;

  "maxApr()"(overrides?: CallOverrides): Promise<BigNumber>;

  minApr(overrides?: CallOverrides): Promise<BigNumber>;

  "minApr()"(overrides?: CallOverrides): Promise<BigNumber>;

  payOutClaim(
    amount: BigNumberish,
    atBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "payOutClaim(uint256,uint256)"(
    amount: BigNumberish,
    atBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  payReward(
    targetEpoch: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "payReward(uint256)"(
    targetEpoch: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardEpochLength(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardEpochLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardVestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardVestingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewards(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; atBlock: BigNumber }
  >;

  "rewards(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; atBlock: BigNumber }
  >;

  scheduleUnstake(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "scheduleUnstake(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shares(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

  "shares(address)"(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sharesAt(
    fromBlock: BigNumberish,
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "sharesAt(uint256,address)"(
    fromBlock: BigNumberish,
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeTarget(overrides?: CallOverrides): Promise<BigNumber>;

  "stakeTarget()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
  >;

  "totalShares(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
  >;

  totalStake(overrides?: CallOverrides): Promise<BigNumber>;

  "totalStake()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakeAt(
    fromBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalStakeAt(uint256)"(
    fromBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalStaked(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
  >;

  "totalStaked(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
  >;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(
    fromBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupplyAt(uint256)"(
    fromBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  undelegateShares(overrides?: Overrides): Promise<ContractTransaction>;

  "undelegateShares()"(overrides?: Overrides): Promise<ContractTransaction>;

  unstake(overrides?: Overrides): Promise<ContractTransaction>;

  "unstake()"(overrides?: Overrides): Promise<ContractTransaction>;

  unstakeAndWithdraw(
    destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unstakeAndWithdraw(address)"(
    destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unstakeWaitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "unstakeWaitPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateCoeff(overrides?: CallOverrides): Promise<BigNumber>;

  "updateCoeff()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateUserLocked(
    userAddress: string,
    targetEpoch: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateUserLocked(address,uint256)"(
    userAddress: string,
    targetEpoch: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userDelegating(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "userDelegating(address)"(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userDelegatingAt(
    userAddress: string,
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "userDelegatingAt(address,uint256)"(
    userAddress: string,
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userStaked(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userStaked(address)"(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  users(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      unstaked: BigNumber;
      locked: BigNumber;
      vesting: BigNumber;
      unstakeScheduledFor: BigNumber;
      unstakeAmount: BigNumber;
      lastUpdateEpoch: BigNumber;
      oldestLockedEpoch: BigNumber;
    }
  >;

  "users(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      unstaked: BigNumber;
      locked: BigNumber;
      vesting: BigNumber;
      unstakeScheduledFor: BigNumber;
      unstakeAmount: BigNumber;
      lastUpdateEpoch: BigNumber;
      oldestLockedEpoch: BigNumber;
    }
  >;

  withdraw(
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(uint256,address)"(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimsManager(overrides?: CallOverrides): Promise<string>;

    "claimsManager()"(overrides?: CallOverrides): Promise<string>;

    currentApr(overrides?: CallOverrides): Promise<BigNumber>;

    "currentApr()"(overrides?: CallOverrides): Promise<BigNumber>;

    delegateShares(delegate: string, overrides?: CallOverrides): Promise<void>;

    "delegateShares(address)"(
      delegate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    delegatedTo(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "delegatedTo(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatedToAt(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "delegatedToAt(uint256,address)"(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256,address)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndStake(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAndStake(address,uint256,address)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "genesisEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUserLocked(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserLocked(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLockedAt(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserLockedAt(address,uint256)"(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastEpochPaid(overrides?: CallOverrides): Promise<BigNumber>;

    "lastEpochPaid()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxApr(overrides?: CallOverrides): Promise<BigNumber>;

    "maxApr()"(overrides?: CallOverrides): Promise<BigNumber>;

    minApr(overrides?: CallOverrides): Promise<BigNumber>;

    "minApr()"(overrides?: CallOverrides): Promise<BigNumber>;

    payOutClaim(
      amount: BigNumberish,
      atBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "payOutClaim(uint256,uint256)"(
      amount: BigNumberish,
      atBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    payReward(
      targetEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "payReward(uint256)"(
      targetEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardEpochLength(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardEpochLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardVestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardVestingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; atBlock: BigNumber }
    >;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; atBlock: BigNumber }
    >;

    scheduleUnstake(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "scheduleUnstake(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shares(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    "shares(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sharesAt(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sharesAt(uint256,address)"(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeTarget()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    "totalShares(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakeAt(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalStakeAt(uint256)"(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    "totalStaked(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    undelegateShares(overrides?: CallOverrides): Promise<void>;

    "undelegateShares()"(overrides?: CallOverrides): Promise<void>;

    unstake(overrides?: CallOverrides): Promise<BigNumber>;

    "unstake()"(overrides?: CallOverrides): Promise<BigNumber>;

    unstakeAndWithdraw(
      destination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "unstakeAndWithdraw(address)"(
      destination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeWaitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "unstakeWaitPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    "updateCoeff()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateUserLocked(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateUserLocked(address,uint256)"(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userDelegating(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "userDelegating(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userDelegatingAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "userDelegatingAt(address,uint256)"(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userStaked(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userStaked(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        unstaked: BigNumber;
        locked: BigNumber;
        vesting: BigNumber;
        unstakeScheduledFor: BigNumber;
        unstakeAmount: BigNumber;
        lastUpdateEpoch: BigNumber;
        oldestLockedEpoch: BigNumber;
      }
    >;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        unstaked: BigNumber;
        locked: BigNumber;
        vesting: BigNumber;
        unstakeScheduledFor: BigNumber;
        unstakeAmount: BigNumber;
        lastUpdateEpoch: BigNumber;
        oldestLockedEpoch: BigNumber;
      }
    >;

    withdraw(
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256)"(
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ClaimPayout(claimBlock: BigNumberish | null, amount: null): EventFilter;

    Delegated(user: string | null, delegate: string | null): EventFilter;

    Deposit(user: string | null, amount: null): EventFilter;

    Epoch(
      epoch: BigNumberish | null,
      rewardAmount: null,
      newApr: null
    ): EventFilter;

    ScheduleUnstake(
      user: string | null,
      amount: null,
      scheduledFor: null
    ): EventFilter;

    Stake(user: string | null, amount: null): EventFilter;

    Undelegated(user: string | null, delegate: string | null): EventFilter;

    Unstake(user: string | null, amount: null): EventFilter;

    UserUpdate(user: string | null, toEpoch: null, locked: null): EventFilter;

    Withdrawal(
      user: string | null,
      destination: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    balanceOf(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(uint256,address)"(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimsManager(overrides?: CallOverrides): Promise<BigNumber>;

    "claimsManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentApr(overrides?: CallOverrides): Promise<BigNumber>;

    "currentApr()"(overrides?: CallOverrides): Promise<BigNumber>;

    delegateShares(delegate: string, overrides?: Overrides): Promise<BigNumber>;

    "delegateShares(address)"(
      delegate: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delegatedTo(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "delegatedTo(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatedToAt(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "delegatedToAt(uint256,address)"(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(address,uint256,address)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositAndStake(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositAndStake(address,uint256,address)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "genesisEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUserLocked(
      userAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getUserLocked(address)"(
      userAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getUserLockedAt(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getUserLockedAt(address,uint256)"(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastEpochPaid(overrides?: CallOverrides): Promise<BigNumber>;

    "lastEpochPaid()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxApr(overrides?: CallOverrides): Promise<BigNumber>;

    "maxApr()"(overrides?: CallOverrides): Promise<BigNumber>;

    minApr(overrides?: CallOverrides): Promise<BigNumber>;

    "minApr()"(overrides?: CallOverrides): Promise<BigNumber>;

    payOutClaim(
      amount: BigNumberish,
      atBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "payOutClaim(uint256,uint256)"(
      amount: BigNumberish,
      atBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    payReward(
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "payReward(uint256)"(
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewardEpochLength(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardEpochLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardVestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardVestingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scheduleUnstake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "scheduleUnstake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shares(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    "shares(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sharesAt(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sharesAt(uint256,address)"(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeTarget()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalShares(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakeAt(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalStakeAt(uint256)"(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalStaked(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    undelegateShares(overrides?: Overrides): Promise<BigNumber>;

    "undelegateShares()"(overrides?: Overrides): Promise<BigNumber>;

    unstake(overrides?: Overrides): Promise<BigNumber>;

    "unstake()"(overrides?: Overrides): Promise<BigNumber>;

    unstakeAndWithdraw(
      destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unstakeAndWithdraw(address)"(
      destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unstakeWaitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "unstakeWaitPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    "updateCoeff()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateUserLocked(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateUserLocked(address,uint256)"(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userDelegating(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userDelegating(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDelegatingAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userDelegatingAt(address,uint256)"(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStaked(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userStaked(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfAt(uint256,address)"(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimsManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "claimsManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentApr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentApr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegateShares(
      delegate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegateShares(address)"(
      delegate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delegatedTo(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "delegatedTo(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegatedToAt(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "delegatedToAt(uint256,address)"(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256,address)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositAndStake(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositAndStake(address,uint256,address)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    genesisEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "genesisEpoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserLocked(
      userAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getUserLocked(address)"(
      userAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getUserLockedAt(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getUserLockedAt(address,uint256)"(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastEpochPaid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastEpochPaid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxApr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxApr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minApr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minApr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payOutClaim(
      amount: BigNumberish,
      atBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "payOutClaim(uint256,uint256)"(
      amount: BigNumberish,
      atBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    payReward(
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "payReward(uint256)"(
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardEpochLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardEpochLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardVestingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardVestingPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scheduleUnstake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "scheduleUnstake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shares(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shares(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sharesAt(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sharesAt(uint256,address)"(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakeTarget()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalShares(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalStake()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakeAt(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalStakeAt(uint256)"(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalStaked(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupplyAt(uint256)"(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    undelegateShares(overrides?: Overrides): Promise<PopulatedTransaction>;

    "undelegateShares()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    unstake(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unstake()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    unstakeAndWithdraw(
      destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unstakeAndWithdraw(address)"(
      destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unstakeWaitPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "unstakeWaitPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCoeff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "updateCoeff()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateUserLocked(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateUserLocked(address,uint256)"(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userDelegating(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userDelegating(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userDelegatingAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userDelegatingAt(address,uint256)"(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStaked(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userStaked(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
