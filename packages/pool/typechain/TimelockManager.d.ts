/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TimelockManagerInterface extends ethers.utils.Interface {
  functions: {
    "api3Pool()": FunctionFragment;
    "api3Token()": FunctionFragment;
    "getIfTimelockIsRevertible(address)": FunctionFragment;
    "getRemainingAmount(address)": FunctionFragment;
    "getTimelock(address)": FunctionFragment;
    "getWithdrawable(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "permitTimelockToBeReverted()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revertTimelock(address,address)": FunctionFragment;
    "timelocks(address)": FunctionFragment;
    "transferAndLock(address,address,uint256,uint256,uint256)": FunctionFragment;
    "transferAndLockMultiple(address,address[],uint256[],uint256[],uint256[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateApi3Pool(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawToPool(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "api3Pool", values?: undefined): string;
  encodeFunctionData(functionFragment: "api3Token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getIfTimelockIsRevertible",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingAmount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getTimelock", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getWithdrawable",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permitTimelockToBeReverted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revertTimelock",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "timelocks", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferAndLock",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAndLockMultiple",
    values: [string, string[], BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateApi3Pool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawToPool",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "api3Pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "api3Token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIfTimelockIsRevertible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitTimelockToBeReverted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timelocks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAndLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAndLockMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateApi3Pool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToPool",
    data: BytesLike
  ): Result;

  events: {
    "Api3PoolUpdated(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PermittedTimelockToBeReverted(address)": EventFragment;
    "RevertedTimelock(address,address,uint256)": EventFragment;
    "TransferredAndLocked(address,address,uint256,uint256,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
    "WithdrawnToPool(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Api3PoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PermittedTimelockToBeReverted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevertedTimelock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferredAndLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnToPool"): EventFragment;
}

export class TimelockManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TimelockManagerInterface;

  functions: {
    api3Pool(overrides?: CallOverrides): Promise<[string]>;

    "api3Pool()"(overrides?: CallOverrides): Promise<[string]>;

    api3Token(overrides?: CallOverrides): Promise<[string]>;

    "api3Token()"(overrides?: CallOverrides): Promise<[string]>;

    getIfTimelockIsRevertible(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { revertStatus: boolean }>;

    "getIfTimelockIsRevertible(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { revertStatus: boolean }>;

    getRemainingAmount(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { remainingAmount: BigNumber }>;

    "getRemainingAmount(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { remainingAmount: BigNumber }>;

    getTimelock(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        remainingAmount: BigNumber;
        releaseStart: BigNumber;
        releaseEnd: BigNumber;
      }
    >;

    "getTimelock(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        remainingAmount: BigNumber;
        releaseStart: BigNumber;
        releaseEnd: BigNumber;
      }
    >;

    getWithdrawable(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { withdrawable: BigNumber }>;

    "getWithdrawable(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { withdrawable: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    permitTimelockToBeReverted(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permitTimelockToBeReverted()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    revertTimelock(
      recipient: string,
      destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revertTimelock(address,address)"(
      recipient: string,
      destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    timelocks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        remainingAmount: BigNumber;
        releaseStart: BigNumber;
        releaseEnd: BigNumber;
      }
    >;

    "timelocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        remainingAmount: BigNumber;
        releaseStart: BigNumber;
        releaseEnd: BigNumber;
      }
    >;

    transferAndLock(
      source: string,
      recipient: string,
      amount: BigNumberish,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferAndLock(address,address,uint256,uint256,uint256)"(
      source: string,
      recipient: string,
      amount: BigNumberish,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferAndLockMultiple(
      source: string,
      recipients: string[],
      amounts: BigNumberish[],
      releaseStarts: BigNumberish[],
      releaseEnds: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferAndLockMultiple(address,address[],uint256[],uint256[],uint256[])"(
      source: string,
      recipients: string[],
      amounts: BigNumberish[],
      releaseStarts: BigNumberish[],
      releaseEnds: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateApi3Pool(
      api3PoolAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateApi3Pool(address)"(
      api3PoolAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawToPool(
      api3PoolAddress: string,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawToPool(address,address)"(
      api3PoolAddress: string,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  api3Pool(overrides?: CallOverrides): Promise<string>;

  "api3Pool()"(overrides?: CallOverrides): Promise<string>;

  api3Token(overrides?: CallOverrides): Promise<string>;

  "api3Token()"(overrides?: CallOverrides): Promise<string>;

  getIfTimelockIsRevertible(
    recipient: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getIfTimelockIsRevertible(address)"(
    recipient: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRemainingAmount(
    recipient: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRemainingAmount(address)"(
    recipient: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimelock(
    recipient: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalAmount: BigNumber;
      remainingAmount: BigNumber;
      releaseStart: BigNumber;
      releaseEnd: BigNumber;
    }
  >;

  "getTimelock(address)"(
    recipient: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalAmount: BigNumber;
      remainingAmount: BigNumber;
      releaseStart: BigNumber;
      releaseEnd: BigNumber;
    }
  >;

  getWithdrawable(
    recipient: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getWithdrawable(address)"(
    recipient: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  permitTimelockToBeReverted(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permitTimelockToBeReverted()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  revertTimelock(
    recipient: string,
    destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revertTimelock(address,address)"(
    recipient: string,
    destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  timelocks(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalAmount: BigNumber;
      remainingAmount: BigNumber;
      releaseStart: BigNumber;
      releaseEnd: BigNumber;
    }
  >;

  "timelocks(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalAmount: BigNumber;
      remainingAmount: BigNumber;
      releaseStart: BigNumber;
      releaseEnd: BigNumber;
    }
  >;

  transferAndLock(
    source: string,
    recipient: string,
    amount: BigNumberish,
    releaseStart: BigNumberish,
    releaseEnd: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferAndLock(address,address,uint256,uint256,uint256)"(
    source: string,
    recipient: string,
    amount: BigNumberish,
    releaseStart: BigNumberish,
    releaseEnd: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferAndLockMultiple(
    source: string,
    recipients: string[],
    amounts: BigNumberish[],
    releaseStarts: BigNumberish[],
    releaseEnds: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferAndLockMultiple(address,address[],uint256[],uint256[],uint256[])"(
    source: string,
    recipients: string[],
    amounts: BigNumberish[],
    releaseStarts: BigNumberish[],
    releaseEnds: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateApi3Pool(
    api3PoolAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateApi3Pool(address)"(
    api3PoolAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawToPool(
    api3PoolAddress: string,
    beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawToPool(address,address)"(
    api3PoolAddress: string,
    beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    api3Pool(overrides?: CallOverrides): Promise<string>;

    "api3Pool()"(overrides?: CallOverrides): Promise<string>;

    api3Token(overrides?: CallOverrides): Promise<string>;

    "api3Token()"(overrides?: CallOverrides): Promise<string>;

    getIfTimelockIsRevertible(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getIfTimelockIsRevertible(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRemainingAmount(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRemainingAmount(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimelock(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        remainingAmount: BigNumber;
        releaseStart: BigNumber;
        releaseEnd: BigNumber;
      }
    >;

    "getTimelock(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        remainingAmount: BigNumber;
        releaseStart: BigNumber;
        releaseEnd: BigNumber;
      }
    >;

    getWithdrawable(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWithdrawable(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    permitTimelockToBeReverted(overrides?: CallOverrides): Promise<void>;

    "permitTimelockToBeReverted()"(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    revertTimelock(
      recipient: string,
      destination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revertTimelock(address,address)"(
      recipient: string,
      destination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    timelocks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        remainingAmount: BigNumber;
        releaseStart: BigNumber;
        releaseEnd: BigNumber;
      }
    >;

    "timelocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        remainingAmount: BigNumber;
        releaseStart: BigNumber;
        releaseEnd: BigNumber;
      }
    >;

    transferAndLock(
      source: string,
      recipient: string,
      amount: BigNumberish,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferAndLock(address,address,uint256,uint256,uint256)"(
      source: string,
      recipient: string,
      amount: BigNumberish,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAndLockMultiple(
      source: string,
      recipients: string[],
      amounts: BigNumberish[],
      releaseStarts: BigNumberish[],
      releaseEnds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "transferAndLockMultiple(address,address[],uint256[],uint256[],uint256[])"(
      source: string,
      recipients: string[],
      amounts: BigNumberish[],
      releaseStarts: BigNumberish[],
      releaseEnds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateApi3Pool(
      api3PoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateApi3Pool(address)"(
      api3PoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;

    withdrawToPool(
      api3PoolAddress: string,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawToPool(address,address)"(
      api3PoolAddress: string,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Api3PoolUpdated(api3PoolAddress: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    PermittedTimelockToBeReverted(recipient: null): EventFilter;

    RevertedTimelock(
      recipient: string | null,
      destination: null,
      amount: null
    ): EventFilter;

    TransferredAndLocked(
      source: null,
      recipient: string | null,
      amount: null,
      releaseStart: null,
      releaseEnd: null
    ): EventFilter;

    Withdrawn(recipient: string | null, amount: null): EventFilter;

    WithdrawnToPool(
      recipient: string | null,
      api3PoolAddress: null,
      beneficiary: null
    ): EventFilter;
  };

  estimateGas: {
    api3Pool(overrides?: CallOverrides): Promise<BigNumber>;

    "api3Pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    api3Token(overrides?: CallOverrides): Promise<BigNumber>;

    "api3Token()"(overrides?: CallOverrides): Promise<BigNumber>;

    getIfTimelockIsRevertible(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIfTimelockIsRevertible(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingAmount(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRemainingAmount(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimelock(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTimelock(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawable(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWithdrawable(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    permitTimelockToBeReverted(overrides?: Overrides): Promise<BigNumber>;

    "permitTimelockToBeReverted()"(overrides?: Overrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    revertTimelock(
      recipient: string,
      destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revertTimelock(address,address)"(
      recipient: string,
      destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    timelocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "timelocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferAndLock(
      source: string,
      recipient: string,
      amount: BigNumberish,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferAndLock(address,address,uint256,uint256,uint256)"(
      source: string,
      recipient: string,
      amount: BigNumberish,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferAndLockMultiple(
      source: string,
      recipients: string[],
      amounts: BigNumberish[],
      releaseStarts: BigNumberish[],
      releaseEnds: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferAndLockMultiple(address,address[],uint256[],uint256[],uint256[])"(
      source: string,
      recipients: string[],
      amounts: BigNumberish[],
      releaseStarts: BigNumberish[],
      releaseEnds: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateApi3Pool(
      api3PoolAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateApi3Pool(address)"(
      api3PoolAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawToPool(
      api3PoolAddress: string,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawToPool(address,address)"(
      api3PoolAddress: string,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    api3Pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "api3Pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    api3Token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "api3Token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIfTimelockIsRevertible(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIfTimelockIsRevertible(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemainingAmount(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRemainingAmount(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimelock(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTimelock(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawable(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWithdrawable(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permitTimelockToBeReverted(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permitTimelockToBeReverted()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    revertTimelock(
      recipient: string,
      destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revertTimelock(address,address)"(
      recipient: string,
      destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    timelocks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "timelocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAndLock(
      source: string,
      recipient: string,
      amount: BigNumberish,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferAndLock(address,address,uint256,uint256,uint256)"(
      source: string,
      recipient: string,
      amount: BigNumberish,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferAndLockMultiple(
      source: string,
      recipients: string[],
      amounts: BigNumberish[],
      releaseStarts: BigNumberish[],
      releaseEnds: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferAndLockMultiple(address,address[],uint256[],uint256[],uint256[])"(
      source: string,
      recipients: string[],
      amounts: BigNumberish[],
      releaseStarts: BigNumberish[],
      releaseEnds: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateApi3Pool(
      api3PoolAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateApi3Pool(address)"(
      api3PoolAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawToPool(
      api3PoolAddress: string,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawToPool(address,address)"(
      api3PoolAddress: string,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
